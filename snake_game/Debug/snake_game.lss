
snake_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000fc6  0000105a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800088  00800088  00001082  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001536  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058e  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d54  00000000  00000000  0000368c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  000043e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000170d  00000000  00000000  00004b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006282  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	66 c0       	rjmp	.+204    	; 0xce <__ctors_end>
   2:	80 c0       	rjmp	.+256    	; 0x104 <__bad_interrupt>
   4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
   6:	7e c0       	rjmp	.+252    	; 0x104 <__bad_interrupt>
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	7c c0       	rjmp	.+248    	; 0x104 <__bad_interrupt>
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	7a c0       	rjmp	.+244    	; 0x104 <__bad_interrupt>
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	78 c0       	rjmp	.+240    	; 0x104 <__bad_interrupt>
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	76 c0       	rjmp	.+236    	; 0x104 <__bad_interrupt>
  18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
  1a:	74 c0       	rjmp	.+232    	; 0x104 <__bad_interrupt>
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	72 c0       	rjmp	.+228    	; 0x104 <__bad_interrupt>
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	70 c0       	rjmp	.+224    	; 0x104 <__bad_interrupt>
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>

00000026 <table>:
  26:	18 24 24 24 24 24 18 00 10 18 14 10 10 10 10 00     .$$$$$..........
  36:	3c 20 20 3c 04 04 3c 00 3c 20 20 38 20 20 3c 00     <  <..<.<  8  <.
  46:	24 24 24 3c 20 20 20 00 3c 04 04 3c 20 20 3c 00     $$$<   .<..<  <.
  56:	10 08 04 1c 24 24 18 00 3c 24 20 10 08 08 08 00     ....$$..<$ .....
  66:	3c 24 24 3c 24 24 3c 00 3c 24 24 3c 20 20 3c 00     <$$<$$<.<$$<  <.
  76:	00 00 18 18 00 18 18 00 3c 24 24 3c 04 04 04 00     ........<$$<....
  86:	04 04 04 04 04 04 3c 00 3c 24 24 3c 24 24 24 00     ......<.<$$<$$$.
  96:	3c 04 04 04 04 04 3c 00 3c 24 24 3c 14 24 24 00     <.....<.<$$<.$$.
	...
  ae:	63 55 49 41 41 41 41 00 3c 04 04 3c 04 04 3c 00     cUIAAAA.<..<..<.
  be:	42 24 18 18 24 42 81 00 38 04 04 18 20 20 1c 00     B$..$B..8...  ..

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e6 ec       	ldi	r30, 0xC6	; 198
  e2:	ff e0       	ldi	r31, 0x0F	; 15
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a8 38       	cpi	r26, 0x88	; 136
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	a8 e8       	ldi	r26, 0x88	; 136
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	aa 39       	cpi	r26, 0x9A	; 154
  fc:	b1 07       	cpc	r27, r17
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	c0 d4       	rcall	.+2432   	; 0xa82 <main>
 102:	5f c7       	rjmp	.+3774   	; 0xfc2 <_exit>

00000104 <__bad_interrupt>:
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <output_led_state>:
#include "74HC595.h"


	   // function that shift the bytes to two 74hc595's
	   void output_led_state(unsigned int __led_state, uint8_t direction)
	   {
 106:	fc 01       	movw	r30, r24
		   SH_CP_low();
 108:	aa 98       	cbi	0x15, 2	; 21
		   ST_CP_low();
 10a:	a9 98       	cbi	0x15, 1	; 21
		   if(direction == LSBFIRST){
 10c:	66 23       	and	r22, r22
 10e:	e1 f4       	brne	.+56     	; 0x148 <output_led_state+0x42>
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
			   for (int i=0;i<16;i++)
			   {
				   if ((_BV(i) & __led_state) == _BV(i))  //bit_is_set doesn’t work on unsigned int so we do this instead
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	cb 01       	movw	r24, r22
 11a:	04 2e       	mov	r0, r20
 11c:	02 c0       	rjmp	.+4      	; 0x122 <output_led_state+0x1c>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <output_led_state+0x18>
 126:	9c 01       	movw	r18, r24
 128:	2e 23       	and	r18, r30
 12a:	3f 23       	and	r19, r31
 12c:	82 17       	cp	r24, r18
 12e:	93 07       	cpc	r25, r19
 130:	11 f4       	brne	.+4      	; 0x136 <output_led_state+0x30>
				   DS_high();
 132:	a8 9a       	sbi	0x15, 0	; 21
 134:	01 c0       	rjmp	.+2      	; 0x138 <output_led_state+0x32>
				   else
				   DS_low();
 136:	a8 98       	cbi	0x15, 0	; 21
				   
				   
				   SH_CP_high();
 138:	aa 9a       	sbi	0x15, 2	; 21
				   SH_CP_low();
 13a:	aa 98       	cbi	0x15, 2	; 21
	   void output_led_state(unsigned int __led_state, uint8_t direction)
	   {
		   SH_CP_low();
		   ST_CP_low();
		   if(direction == LSBFIRST){
			   for (int i=0;i<16;i++)
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	40 31       	cpi	r20, 0x10	; 16
 142:	51 05       	cpc	r21, r1
 144:	49 f7       	brne	.-46     	; 0x118 <output_led_state+0x12>
 146:	1c c0       	rjmp	.+56     	; 0x180 <output_led_state+0x7a>
	   // function that shift the bytes to two 74hc595's
	   void output_led_state(unsigned int __led_state, uint8_t direction)
	   {
		   SH_CP_low();
		   ST_CP_low();
		   if(direction == LSBFIRST){
 148:	4f e0       	ldi	r20, 0x0F	; 15
 14a:	50 e0       	ldi	r21, 0x00	; 0
				   SH_CP_low();
			   }
		   }else{
			   for (int i=15;i>=0;i--)
			   {
				   if ((_BV(i) & __led_state) == _BV(i))  //bit_is_set doesn’t work on unsigned int so we do this instead
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	cb 01       	movw	r24, r22
 152:	04 2e       	mov	r0, r20
 154:	02 c0       	rjmp	.+4      	; 0x15a <output_led_state+0x54>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <output_led_state+0x50>
 15e:	9c 01       	movw	r18, r24
 160:	2e 23       	and	r18, r30
 162:	3f 23       	and	r19, r31
 164:	82 17       	cp	r24, r18
 166:	93 07       	cpc	r25, r19
 168:	11 f4       	brne	.+4      	; 0x16e <output_led_state+0x68>
				   DS_high();
 16a:	a8 9a       	sbi	0x15, 0	; 21
 16c:	01 c0       	rjmp	.+2      	; 0x170 <output_led_state+0x6a>
				   else
				   DS_low();
 16e:	a8 98       	cbi	0x15, 0	; 21
				   
				   
				   SH_CP_high();
 170:	aa 9a       	sbi	0x15, 2	; 21
				   SH_CP_low();
 172:	aa 98       	cbi	0x15, 2	; 21
				   
				   SH_CP_high();
				   SH_CP_low();
			   }
		   }else{
			   for (int i=15;i>=0;i--)
 174:	41 50       	subi	r20, 0x01	; 1
 176:	50 40       	sbci	r21, 0x00	; 0
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	4f 3f       	cpi	r20, 0xFF	; 255
 17c:	58 07       	cpc	r21, r24
 17e:	41 f7       	brne	.-48     	; 0x150 <output_led_state+0x4a>
				   
				   SH_CP_high();
				   SH_CP_low();
			   }
		   }
		   ST_CP_high();
 180:	a9 9a       	sbi	0x15, 1	; 21
 182:	08 95       	ret

00000184 <display_pixels>:
		   DDRD = 0;
		   PORTD = 0xFF;
	   }

       //function to print the screen
		void display_pixels(unsigned char screen[8],int delay){
 184:	2f 92       	push	r2
 186:	3f 92       	push	r3
 188:	4f 92       	push	r4
 18a:	5f 92       	push	r5
 18c:	6f 92       	push	r6
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	68 2e       	mov	r6, r24
 1aa:	79 2e       	mov	r7, r25
 1ac:	4b 01       	movw	r8, r22
			unsigned int pattern;
			uint8_t direction_changed = NO;
			
			for(int i =0 ; i< delay; i++){
 1ae:	16 16       	cp	r1, r22
 1b0:	17 06       	cpc	r1, r23
 1b2:	0c f0       	brlt	.+2      	; 0x1b6 <display_pixels+0x32>
 1b4:	74 c0       	rjmp	.+232    	; 0x29e <display_pixels+0x11a>
 1b6:	aa 24       	eor	r10, r10
 1b8:	bb 24       	eor	r11, r11
	   }

       //function to print the screen
		void display_pixels(unsigned char screen[8],int delay){
			unsigned int pattern;
			uint8_t direction_changed = NO;
 1ba:	cc 24       	eor	r12, r12
			for(int i =0 ; i< delay; i++){
				if(bit_is_clear(BUTTON_UP_PORT,BUTTON_UP_PIN)){
					if((direction != DOWN) && (direction_changed == NO)){
					//if((direction != DOWN)){
						direction = UP;
						direction_changed = YES;
 1bc:	dd 24       	eor	r13, r13
 1be:	d3 94       	inc	r13
					}
				}
				if(bit_is_clear(BUTTON_LEFT_PORT,BUTTON_LEFT_PIN)){
					if((direction != RIGHT) && (direction_changed == NO)){
						direction = LEFT;
 1c0:	33 24       	eor	r3, r3
 1c2:	68 94       	set
 1c4:	31 f8       	bld	r3, 1
						direction_changed = YES;
					}
				}
				if(bit_is_clear(BUTTON_RIGHT_PORT,BUTTON_RIGHT_PIN)){
					if((direction != LEFT) && (direction_changed == NO)){
						direction = RIGHT;
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	2f 2e       	mov	r2, r31
 1cc:	f0 2d       	mov	r31, r0
						direction_changed = YES;
 1ce:	44 24       	eor	r4, r4
 1d0:	55 24       	eor	r5, r5
					_delay_ms(300);
				}
				for(int row = 0; row < NUM_ROWS; row++){
					pattern =  ~screen[row];    //draw columns
					pattern <<= NUM_COLS;
					pattern |= 0b00000001<<row; // row by row individualy
 1d2:	ee 24       	eor	r14, r14
 1d4:	ff 24       	eor	r15, r15
 1d6:	e3 94       	inc	r14
		void display_pixels(unsigned char screen[8],int delay){
			unsigned int pattern;
			uint8_t direction_changed = NO;
			
			for(int i =0 ; i< delay; i++){
				if(bit_is_clear(BUTTON_UP_PORT,BUTTON_UP_PIN)){
 1d8:	b3 99       	sbic	0x16, 3	; 22
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <display_pixels+0x6a>
					if((direction != DOWN) && (direction_changed == NO)){
 1dc:	80 91 7c 00 	lds	r24, 0x007C
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	29 f0       	breq	.+10     	; 0x1ee <display_pixels+0x6a>
 1e4:	cc 20       	and	r12, r12
 1e6:	19 f4       	brne	.+6      	; 0x1ee <display_pixels+0x6a>
					//if((direction != DOWN)){
						direction = UP;
 1e8:	10 92 7c 00 	sts	0x007C, r1
						direction_changed = YES;
 1ec:	cd 2c       	mov	r12, r13
					}
				}
				if(bit_is_clear(BUTTON_LEFT_PORT,BUTTON_LEFT_PIN)){
 1ee:	b5 99       	sbic	0x16, 5	; 22
 1f0:	09 c0       	rjmp	.+18     	; 0x204 <display_pixels+0x80>
					if((direction != RIGHT) && (direction_changed == NO)){
 1f2:	80 91 7c 00 	lds	r24, 0x007C
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	29 f0       	breq	.+10     	; 0x204 <display_pixels+0x80>
 1fa:	cc 20       	and	r12, r12
 1fc:	19 f4       	brne	.+6      	; 0x204 <display_pixels+0x80>
						direction = LEFT;
 1fe:	30 92 7c 00 	sts	0x007C, r3
						direction_changed = YES;
 202:	cd 2c       	mov	r12, r13
					}
				}
				if(bit_is_clear(BUTTON_DOWN_PORT,BUTTON_DOWN_PIN)){
 204:	b1 99       	sbic	0x16, 1	; 22
 206:	09 c0       	rjmp	.+18     	; 0x21a <display_pixels+0x96>
					if((direction != UP) && (direction_changed == NO)){
 208:	80 91 7c 00 	lds	r24, 0x007C
 20c:	88 23       	and	r24, r24
 20e:	29 f0       	breq	.+10     	; 0x21a <display_pixels+0x96>
 210:	cc 20       	and	r12, r12
 212:	19 f4       	brne	.+6      	; 0x21a <display_pixels+0x96>
						direction = DOWN;
 214:	d0 92 7c 00 	sts	0x007C, r13
						direction_changed = YES;
 218:	cd 2c       	mov	r12, r13
					}
				}
				if(bit_is_clear(BUTTON_RIGHT_PORT,BUTTON_RIGHT_PIN)){
 21a:	b2 99       	sbic	0x16, 2	; 22
 21c:	09 c0       	rjmp	.+18     	; 0x230 <display_pixels+0xac>
					if((direction != LEFT) && (direction_changed == NO)){
 21e:	80 91 7c 00 	lds	r24, 0x007C
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	29 f0       	breq	.+10     	; 0x230 <display_pixels+0xac>
 226:	cc 20       	and	r12, r12
 228:	19 f4       	brne	.+6      	; 0x230 <display_pixels+0xac>
						direction = RIGHT;
 22a:	20 92 7c 00 	sts	0x007C, r2
						direction_changed = YES;
 22e:	cd 2c       	mov	r12, r13
					}
				}
				if(bit_is_clear(BUTTON_PAUSE_PORT,BUTTON_PAUSE_PIN)){
 230:	b4 99       	sbic	0x16, 4	; 22
 232:	14 c0       	rjmp	.+40     	; 0x25c <display_pixels+0xd8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	95 ea       	ldi	r25, 0xA5	; 165
 238:	ae e0       	ldi	r26, 0x0E	; 14
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	a0 40       	sbci	r26, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <display_pixels+0xb6>
 242:	00 c0       	rjmp	.+0      	; 0x244 <display_pixels+0xc0>
 244:	00 00       	nop
					_delay_ms(300);
					while(bit_is_set(BUTTON_PAUSE_PORT,BUTTON_PAUSE_PIN));
 246:	b4 99       	sbic	0x16, 4	; 22
 248:	fe cf       	rjmp	.-4      	; 0x246 <display_pixels+0xc2>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	95 ea       	ldi	r25, 0xA5	; 165
 24e:	ae e0       	ldi	r26, 0x0E	; 14
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	a0 40       	sbci	r26, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <display_pixels+0xcc>
 258:	00 c0       	rjmp	.+0      	; 0x25a <display_pixels+0xd6>
 25a:	00 00       	nop
 25c:	06 2d       	mov	r16, r6
 25e:	17 2d       	mov	r17, r7
					}
				}
				if(bit_is_clear(BUTTON_RIGHT_PORT,BUTTON_RIGHT_PIN)){
					if((direction != LEFT) && (direction_changed == NO)){
						direction = RIGHT;
						direction_changed = YES;
 260:	e2 01       	movw	r28, r4
					_delay_ms(300);
					while(bit_is_set(BUTTON_PAUSE_PORT,BUTTON_PAUSE_PIN));
					_delay_ms(300);
				}
				for(int row = 0; row < NUM_ROWS; row++){
					pattern =  ~screen[row];    //draw columns
 262:	d8 01       	movw	r26, r16
 264:	8d 91       	ld	r24, X+
 266:	8d 01       	movw	r16, r26
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
					pattern <<= NUM_COLS;
 26e:	98 2f       	mov	r25, r24
 270:	88 27       	eor	r24, r24
					pattern |= 0b00000001<<row; // row by row individualy
 272:	97 01       	movw	r18, r14
 274:	0c 2e       	mov	r0, r28
 276:	02 c0       	rjmp	.+4      	; 0x27c <display_pixels+0xf8>
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <display_pixels+0xf4>
					output_led_state(pattern,MSBFIRST);
 280:	82 2b       	or	r24, r18
 282:	93 2b       	or	r25, r19
 284:	6d 2d       	mov	r22, r13
 286:	3f df       	rcall	.-386    	; 0x106 <output_led_state>
				if(bit_is_clear(BUTTON_PAUSE_PORT,BUTTON_PAUSE_PIN)){
					_delay_ms(300);
					while(bit_is_set(BUTTON_PAUSE_PORT,BUTTON_PAUSE_PIN));
					_delay_ms(300);
				}
				for(int row = 0; row < NUM_ROWS; row++){
 288:	21 96       	adiw	r28, 0x01	; 1
 28a:	c8 30       	cpi	r28, 0x08	; 8
 28c:	d1 05       	cpc	r29, r1
 28e:	49 f7       	brne	.-46     	; 0x262 <display_pixels+0xde>
       //function to print the screen
		void display_pixels(unsigned char screen[8],int delay){
			unsigned int pattern;
			uint8_t direction_changed = NO;
			
			for(int i =0 ; i< delay; i++){
 290:	08 94       	sec
 292:	a1 1c       	adc	r10, r1
 294:	b1 1c       	adc	r11, r1
 296:	a8 14       	cp	r10, r8
 298:	b9 04       	cpc	r11, r9
 29a:	09 f0       	breq	.+2      	; 0x29e <display_pixels+0x11a>
 29c:	9d cf       	rjmp	.-198    	; 0x1d8 <display_pixels+0x54>
					pattern <<= NUM_COLS;
					pattern |= 0b00000001<<row; // row by row individualy
					output_led_state(pattern,MSBFIRST);
				}
			}
		}					
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	ff 90       	pop	r15
 2a8:	ef 90       	pop	r14
 2aa:	df 90       	pop	r13
 2ac:	cf 90       	pop	r12
 2ae:	bf 90       	pop	r11
 2b0:	af 90       	pop	r10
 2b2:	9f 90       	pop	r9
 2b4:	8f 90       	pop	r8
 2b6:	7f 90       	pop	r7
 2b8:	6f 90       	pop	r6
 2ba:	5f 90       	pop	r5
 2bc:	4f 90       	pop	r4
 2be:	3f 90       	pop	r3
 2c0:	2f 90       	pop	r2
 2c2:	08 95       	ret

000002c4 <on>:
		void on(uint8_t row, uint8_t col){
			screen[row] |= _BV(col);
 2c4:	2a e8       	ldi	r18, 0x8A	; 138
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	e8 0f       	add	r30, r24
 2cc:	f1 1d       	adc	r31, r1
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	9c 01       	movw	r18, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <on+0x16>
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <on+0x12>
 2de:	b9 01       	movw	r22, r18
 2e0:	80 81       	ld	r24, Z
 2e2:	68 2b       	or	r22, r24
 2e4:	60 83       	st	Z, r22
		}
 2e6:	08 95       	ret

000002e8 <off>:
		void off(unsigned char screen[NUM_ROWS], uint8_t row, uint8_t col){
			screen[row] &= ~_BV(col);
 2e8:	fc 01       	movw	r30, r24
 2ea:	e6 0f       	add	r30, r22
 2ec:	f1 1d       	adc	r31, r1
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9c 01       	movw	r18, r24
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <off+0x12>
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	4a 95       	dec	r20
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <off+0xe>
 2fe:	a9 01       	movw	r20, r18
 300:	40 95       	com	r20
 302:	80 81       	ld	r24, Z
 304:	48 23       	and	r20, r24
 306:	40 83       	st	Z, r20
		}
 308:	08 95       	ret

0000030a <create_snake>:
						   break;
						}
					}	
				}
		}//end move function
		struct snake_cell* create_snake(uint8_t size,uint8_t head_row,uint8_t head_col, unsigned char direction){
 30a:	af 92       	push	r10
 30c:	bf 92       	push	r11
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	d8 2f       	mov	r29, r24
 320:	c6 2f       	mov	r28, r22
 322:	14 2f       	mov	r17, r20
 324:	02 2f       	mov	r16, r18
			struct snake_cell *pHead;
			struct snake_cell *pAux, *pAux2;
			pHead = (struct snake_cell*) malloc(sizeof(struct snake_cell));
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	88 d4       	rcall	.+2320   	; 0xc3c <malloc>
 32c:	c8 2e       	mov	r12, r24
 32e:	d9 2e       	mov	r13, r25
			pHead->row = head_row;
 330:	d6 01       	movw	r26, r12
 332:	cc 93       	st	X, r28
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	1c 92       	st	X, r1
 338:	11 97       	sbiw	r26, 0x01	; 1
			pHead->col = head_col;
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	1c 93       	st	X, r17
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	13 96       	adiw	r26, 0x03	; 3
 342:	1c 92       	st	X, r1
 344:	13 97       	sbiw	r26, 0x03	; 3
			pHead->next = NULL;
 346:	15 96       	adiw	r26, 0x05	; 5
 348:	1c 92       	st	X, r1
 34a:	1e 92       	st	-X, r1
 34c:	14 97       	sbiw	r26, 0x04	; 4
			size--;
 34e:	d1 50       	subi	r29, 0x01	; 1
			pAux = pHead;
			while(size--){
 350:	09 f4       	brne	.+2      	; 0x354 <create_snake+0x4a>
 352:	4a c0       	rjmp	.+148    	; 0x3e8 <create_snake+0xde>
 354:	d1 50       	subi	r29, 0x01	; 1
			pHead = (struct snake_cell*) malloc(sizeof(struct snake_cell));
			pHead->row = head_row;
			pHead->col = head_col;
			pHead->next = NULL;
			size--;
			pAux = pHead;
 356:	76 01       	movw	r14, r12
						 head_row = head_row == 0 ? NUM_ROWS - 1 : head_row - 1;
						pAux2->col = head_col;
						pAux2->row = head_row;
					}
					if(direction == DOWN){
						head_row = head_row == NUM_ROWS - 1? 0 :head_row + 1;
 358:	aa 24       	eor	r10, r10
						pAux2->row = head_row;
						head_col = head_col == 0 ? NUM_COLS-1 :head_col - 1;
						pAux2->col = head_col;
					}
					if(direction == UP){
						 head_row = head_row == 0 ? NUM_ROWS - 1 : head_row - 1;
 35a:	0f 2e       	mov	r0, r31
 35c:	f7 e0       	ldi	r31, 0x07	; 7
 35e:	bf 2e       	mov	r11, r31
 360:	f0 2d       	mov	r31, r0
 362:	02 c0       	rjmp	.+4      	; 0x368 <create_snake+0x5e>
			pHead->row = head_row;
			pHead->col = head_col;
			pHead->next = NULL;
			size--;
			pAux = pHead;
			while(size--){
 364:	d8 2f       	mov	r29, r24
						head_row = head_row == NUM_ROWS - 1? 0 :head_row + 1;
						pAux2->col = head_col;
						pAux2->row = head_row;
					}
					pAux->next = pAux2;
					pAux = pAux->next;
 366:	7f 01       	movw	r14, r30
			pHead->col = head_col;
			pHead->next = NULL;
			size--;
			pAux = pHead;
			while(size--){
			    	pAux2 = (struct snake_cell*) malloc(sizeof(struct snake_cell));
 368:	86 e0       	ldi	r24, 0x06	; 6
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	67 d4       	rcall	.+2254   	; 0xc3c <malloc>
 36e:	e8 2f       	mov	r30, r24
 370:	f9 2f       	mov	r31, r25
					if(direction == LEFT){
 372:	02 30       	cpi	r16, 0x02	; 2
 374:	51 f4       	brne	.+20     	; 0x38a <create_snake+0x80>
					      	pAux2->row = head_row;
 376:	c0 83       	st	Z, r28
 378:	11 82       	std	Z+1, r1	; 0x01
							  head_col = head_col == NUM_COLS - 1 ? 0 : head_col + 1;
 37a:	17 30       	cpi	r17, 0x07	; 7
 37c:	11 f0       	breq	.+4      	; 0x382 <create_snake+0x78>
 37e:	1f 5f       	subi	r17, 0xFF	; 255
 380:	01 c0       	rjmp	.+2      	; 0x384 <create_snake+0x7a>
 382:	1a 2d       	mov	r17, r10
							pAux2->col = head_col;
 384:	12 83       	std	Z+2, r17	; 0x02
 386:	13 82       	std	Z+3, r1	; 0x03
 388:	18 c0       	rjmp	.+48     	; 0x3ba <create_snake+0xb0>
					}
					if(direction == RIGHT){
 38a:	03 30       	cpi	r16, 0x03	; 3
 38c:	51 f4       	brne	.+20     	; 0x3a2 <create_snake+0x98>
						pAux2->row = head_row;
 38e:	c0 83       	st	Z, r28
 390:	11 82       	std	Z+1, r1	; 0x01
						head_col = head_col == 0 ? NUM_COLS-1 :head_col - 1;
 392:	11 23       	and	r17, r17
 394:	11 f0       	breq	.+4      	; 0x39a <create_snake+0x90>
 396:	11 50       	subi	r17, 0x01	; 1
 398:	01 c0       	rjmp	.+2      	; 0x39c <create_snake+0x92>
 39a:	1b 2d       	mov	r17, r11
						pAux2->col = head_col;
 39c:	12 83       	std	Z+2, r17	; 0x02
 39e:	13 82       	std	Z+3, r1	; 0x03
 3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <create_snake+0xc6>
					}
					if(direction == UP){
 3a2:	00 23       	and	r16, r16
 3a4:	51 f4       	brne	.+20     	; 0x3ba <create_snake+0xb0>
						 head_row = head_row == 0 ? NUM_ROWS - 1 : head_row - 1;
 3a6:	cc 23       	and	r28, r28
 3a8:	11 f0       	breq	.+4      	; 0x3ae <create_snake+0xa4>
 3aa:	c1 50       	subi	r28, 0x01	; 1
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <create_snake+0xa6>
 3ae:	cb 2d       	mov	r28, r11
						pAux2->col = head_col;
 3b0:	12 83       	std	Z+2, r17	; 0x02
 3b2:	13 82       	std	Z+3, r1	; 0x03
						pAux2->row = head_row;
 3b4:	c0 83       	st	Z, r28
 3b6:	11 82       	std	Z+1, r1	; 0x01
 3b8:	0b c0       	rjmp	.+22     	; 0x3d0 <create_snake+0xc6>
					}
					if(direction == DOWN){
 3ba:	01 30       	cpi	r16, 0x01	; 1
 3bc:	49 f4       	brne	.+18     	; 0x3d0 <create_snake+0xc6>
						head_row = head_row == NUM_ROWS - 1? 0 :head_row + 1;
 3be:	c7 30       	cpi	r28, 0x07	; 7
 3c0:	11 f0       	breq	.+4      	; 0x3c6 <create_snake+0xbc>
 3c2:	cf 5f       	subi	r28, 0xFF	; 255
 3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <create_snake+0xbe>
 3c6:	ca 2d       	mov	r28, r10
						pAux2->col = head_col;
 3c8:	12 83       	std	Z+2, r17	; 0x02
 3ca:	13 82       	std	Z+3, r1	; 0x03
						pAux2->row = head_row;
 3cc:	c0 83       	st	Z, r28
 3ce:	11 82       	std	Z+1, r1	; 0x01
					}
					pAux->next = pAux2;
 3d0:	d7 01       	movw	r26, r14
 3d2:	15 96       	adiw	r26, 0x05	; 5
 3d4:	fc 93       	st	X, r31
 3d6:	ee 93       	st	-X, r30
 3d8:	14 97       	sbiw	r26, 0x04	; 4
					pAux = pAux->next;
					pAux->next = NULL; 
 3da:	15 82       	std	Z+5, r1	; 0x05
 3dc:	14 82       	std	Z+4, r1	; 0x04
			pHead->row = head_row;
			pHead->col = head_col;
			pHead->next = NULL;
			size--;
			pAux = pHead;
			while(size--){
 3de:	8d 2f       	mov	r24, r29
 3e0:	81 50       	subi	r24, 0x01	; 1
 3e2:	dd 23       	and	r29, r29
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <create_snake+0xde>
 3e6:	be cf       	rjmp	.-132    	; 0x364 <create_snake+0x5a>
					pAux->next = pAux2;
					pAux = pAux->next;
					pAux->next = NULL; 
			}
			return pHead;
		}
 3e8:	8c 2d       	mov	r24, r12
 3ea:	9d 2d       	mov	r25, r13
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	df 90       	pop	r13
 3fa:	cf 90       	pop	r12
 3fc:	bf 90       	pop	r11
 3fe:	af 90       	pop	r10
 400:	08 95       	ret

00000402 <create_fruit>:
					on(pAux->row,pAux->col);
					pAux = pAux->next;
			}
			on(fruit_row,fruit_col);
		}
		void create_fruit(long count,struct snake_cell *pHead){
 402:	8f 92       	push	r8
 404:	9f 92       	push	r9
 406:	af 92       	push	r10
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
 41c:	c4 2f       	mov	r28, r20
 41e:	d5 2f       	mov	r29, r21
			uint8_t row,col;
			struct snake_cell *pAux;
			row = count%8;
 420:	88 24       	eor	r8, r8
 422:	99 24       	eor	r9, r9
 424:	54 01       	movw	r10, r8
 426:	68 94       	set
 428:	83 f8       	bld	r8, 3
 42a:	a5 01       	movw	r20, r10
 42c:	94 01       	movw	r18, r8
 42e:	c9 d3       	rcall	.+1938   	; 0xbc2 <__divmodsi4>
 430:	16 2f       	mov	r17, r22
			count++;
			count++;
 432:	c7 01       	movw	r24, r14
 434:	b6 01       	movw	r22, r12
 436:	6e 5f       	subi	r22, 0xFE	; 254
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	8f 4f       	sbci	r24, 0xFF	; 255
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
			col = count%8;
 43e:	a5 01       	movw	r20, r10
 440:	94 01       	movw	r18, r8
 442:	bf d3       	rcall	.+1918   	; 0xbc2 <__divmodsi4>
			pAux = pHead;
 444:	ec 2f       	mov	r30, r28
 446:	fd 2f       	mov	r31, r29
			do{
				if((col == pAux->col) && (row == pAux->row)){
 448:	46 2f       	mov	r20, r22
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	a1 2f       	mov	r26, r17
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	22 81       	ldd	r18, Z+2	; 0x02
 452:	33 81       	ldd	r19, Z+3	; 0x03
 454:	42 17       	cp	r20, r18
 456:	53 07       	cpc	r21, r19
 458:	81 f4       	brne	.+32     	; 0x47a <__stack+0x1b>
 45a:	20 81       	ld	r18, Z
 45c:	31 81       	ldd	r19, Z+1	; 0x01
 45e:	a2 17       	cp	r26, r18
 460:	b3 07       	cpc	r27, r19
 462:	59 f4       	brne	.+22     	; 0x47a <__stack+0x1b>
				      	count++;
						row = rand()%8;
 464:	6b d5       	rcall	.+2774   	; 0xf3c <rand>
 466:	c8 e0       	ldi	r28, 0x08	; 8
 468:	d0 e0       	ldi	r29, 0x00	; 0
 46a:	be 01       	movw	r22, r28
 46c:	97 d3       	rcall	.+1838   	; 0xb9c <__divmodhi4>
 46e:	18 2f       	mov	r17, r24
						count++;
						count++;
						col = rand()%8;
 470:	65 d5       	rcall	.+2762   	; 0xf3c <rand>
 472:	be 01       	movw	r22, r28
 474:	93 d3       	rcall	.+1830   	; 0xb9c <__divmodhi4>
 476:	68 2f       	mov	r22, r24
						pAux = pHead;
						break;
 478:	02 c0       	rjmp	.+4      	; 0x47e <__stack+0x1f>
				}
			}while(++pAux);
 47a:	36 96       	adiw	r30, 0x06	; 6
 47c:	49 f7       	brne	.-46     	; 0x450 <create_fruit+0x4e>
			fruit_row = row;
 47e:	10 93 95 00 	sts	0x0095, r17
			fruit_col = col;
 482:	60 93 92 00 	sts	0x0092, r22
		}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	ff 90       	pop	r15
 48e:	ef 90       	pop	r14
 490:	df 90       	pop	r13
 492:	cf 90       	pop	r12
 494:	bf 90       	pop	r11
 496:	af 90       	pop	r10
 498:	9f 90       	pop	r9
 49a:	8f 90       	pop	r8
 49c:	08 95       	ret

0000049e <clear_screen>:
		
		void clear_screen(){
			unsigned char   clearscreen[NUM_ROWS] = CLEARSCREEN;
			//clear the screen
			for(uint8_t i =0 ; i < NUM_ROWS; i++){
				screen[i] = clearscreen[i];
 49e:	10 92 8a 00 	sts	0x008A, r1
 4a2:	10 92 8b 00 	sts	0x008B, r1
 4a6:	10 92 8c 00 	sts	0x008C, r1
 4aa:	10 92 8d 00 	sts	0x008D, r1
 4ae:	10 92 8e 00 	sts	0x008E, r1
 4b2:	10 92 8f 00 	sts	0x008F, r1
 4b6:	10 92 90 00 	sts	0x0090, r1
 4ba:	10 92 91 00 	sts	0x0091, r1
			}
		}
 4be:	08 95       	ret

000004c0 <face>:
			fruit_row = row;
			fruit_col = col;
		}
		
		void face()
		{
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	12 e0       	ldi	r17, 0x02	; 2
				on(7, 2);
				on(7, 3);
				on(7, 4);
				on(7, 5);
				//draw the screen
				display_pixels(screen,SLIDE_DELAY_SCREEN);
 4c8:	ca e8       	ldi	r28, 0x8A	; 138
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		void face()
		{
			for(uint8_t j = 0; j<2; j++){
				clear_screen();
 4cc:	e8 df       	rcall	.-48     	; 0x49e <clear_screen>
				//generate the face
				//left eye
				on(0, 0);
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	f8 de       	rcall	.-528    	; 0x2c4 <on>
				on(0, 1);
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	f5 de       	rcall	.-534    	; 0x2c4 <on>
				on(1, 0);
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	f2 de       	rcall	.-540    	; 0x2c4 <on>
				on(1, 1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	ef de       	rcall	.-546    	; 0x2c4 <on>
				//right eye
				on(0, 6);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	66 e0       	ldi	r22, 0x06	; 6
 4ea:	ec de       	rcall	.-552    	; 0x2c4 <on>
				on(0, 7);
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	67 e0       	ldi	r22, 0x07	; 7
 4f0:	e9 de       	rcall	.-558    	; 0x2c4 <on>
				on(1, 6);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	e6 de       	rcall	.-564    	; 0x2c4 <on>
				on(1, 7);
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	67 e0       	ldi	r22, 0x07	; 7
 4fc:	e3 de       	rcall	.-570    	; 0x2c4 <on>
				//nose
				on(3, 3);
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	e0 de       	rcall	.-576    	; 0x2c4 <on>
				on(3, 4);
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	dd de       	rcall	.-582    	; 0x2c4 <on>
				on(4, 3);
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	da de       	rcall	.-588    	; 0x2c4 <on>
				on(4, 4);
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	64 e0       	ldi	r22, 0x04	; 4
 514:	d7 de       	rcall	.-594    	; 0x2c4 <on>
				//mouth
				on(5, 0);
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	d4 de       	rcall	.-600    	; 0x2c4 <on>
				on(5, 7);
 51c:	85 e0       	ldi	r24, 0x05	; 5
 51e:	67 e0       	ldi	r22, 0x07	; 7
 520:	d1 de       	rcall	.-606    	; 0x2c4 <on>
				on(6, 1);
 522:	86 e0       	ldi	r24, 0x06	; 6
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	ce de       	rcall	.-612    	; 0x2c4 <on>
				on(6, 6);
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	66 e0       	ldi	r22, 0x06	; 6
 52c:	cb de       	rcall	.-618    	; 0x2c4 <on>
				on(7, 2);
 52e:	87 e0       	ldi	r24, 0x07	; 7
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	c8 de       	rcall	.-624    	; 0x2c4 <on>
				on(7, 3);
 534:	87 e0       	ldi	r24, 0x07	; 7
 536:	63 e0       	ldi	r22, 0x03	; 3
 538:	c5 de       	rcall	.-630    	; 0x2c4 <on>
				on(7, 4);
 53a:	87 e0       	ldi	r24, 0x07	; 7
 53c:	64 e0       	ldi	r22, 0x04	; 4
 53e:	c2 de       	rcall	.-636    	; 0x2c4 <on>
				on(7, 5);
 540:	87 e0       	ldi	r24, 0x07	; 7
 542:	65 e0       	ldi	r22, 0x05	; 5
 544:	bf de       	rcall	.-642    	; 0x2c4 <on>
				//draw the screen
				display_pixels(screen,SLIDE_DELAY_SCREEN);
 546:	ce 01       	movw	r24, r28
 548:	68 ee       	ldi	r22, 0xE8	; 232
 54a:	73 e0       	ldi	r23, 0x03	; 3
 54c:	1b de       	rcall	.-970    	; 0x184 <display_pixels>
				clear_screen();
 54e:	a7 df       	rcall	.-178    	; 0x49e <clear_screen>
				display_pixels(screen,SLIDE_DELAY_SCREEN);
 550:	ce 01       	movw	r24, r28
 552:	68 ee       	ldi	r22, 0xE8	; 232
 554:	73 e0       	ldi	r23, 0x03	; 3
 556:	16 de       	rcall	.-980    	; 0x184 <display_pixels>
 558:	11 50       	subi	r17, 0x01	; 1
			fruit_col = col;
		}
		
		void face()
		{
			for(uint8_t j = 0; j<2; j++){
 55a:	09 f0       	breq	.+2      	; 0x55e <face+0x9e>
 55c:	b7 cf       	rjmp	.-146    	; 0x4cc <face+0xc>
				display_pixels(screen,SLIDE_DELAY_SCREEN);
				clear_screen();
				display_pixels(screen,SLIDE_DELAY_SCREEN);

			}			
		}  //end face function
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	08 95       	ret

00000566 <draw_snake>:
					pAux = pAux->next;
					pAux->next = NULL; 
			}
			return pHead;
		}
        void draw_snake(unsigned char screen[NUM_ROWS],struct snake_cell *pHead, uint8_t fruit_row, uint8_t fruit_col){
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	eb 01       	movw	r28, r22
 570:	14 2f       	mov	r17, r20
 572:	02 2f       	mov	r16, r18
			struct snake_cell *pAux = pHead;

			clear_screen();
 574:	94 df       	rcall	.-216    	; 0x49e <clear_screen>
			while(pAux != NULL){
 576:	20 97       	sbiw	r28, 0x00	; 0
 578:	41 f0       	breq	.+16     	; 0x58a <draw_snake+0x24>
					on(pAux->row,pAux->col);
 57a:	88 81       	ld	r24, Y
 57c:	6a 81       	ldd	r22, Y+2	; 0x02
 57e:	a2 de       	rcall	.-700    	; 0x2c4 <on>
					pAux = pAux->next;
 580:	0c 80       	ldd	r0, Y+4	; 0x04
 582:	dd 81       	ldd	r29, Y+5	; 0x05
 584:	c0 2d       	mov	r28, r0
		}
        void draw_snake(unsigned char screen[NUM_ROWS],struct snake_cell *pHead, uint8_t fruit_row, uint8_t fruit_col){
			struct snake_cell *pAux = pHead;

			clear_screen();
			while(pAux != NULL){
 586:	20 97       	sbiw	r28, 0x00	; 0
 588:	c1 f7       	brne	.-16     	; 0x57a <draw_snake+0x14>
					on(pAux->row,pAux->col);
					pAux = pAux->next;
			}
			on(fruit_row,fruit_col);
 58a:	81 2f       	mov	r24, r17
 58c:	60 2f       	mov	r22, r16
 58e:	9a de       	rcall	.-716    	; 0x2c4 <on>
		}
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	08 95       	ret

0000059a <slidePattern>:
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 59a:	2f 92       	push	r2
 59c:	3f 92       	push	r3
 59e:	4f 92       	push	r4
 5a0:	5f 92       	push	r5
 5a2:	6f 92       	push	r6
 5a4:	7f 92       	push	r7
 5a6:	8f 92       	push	r8
 5a8:	9f 92       	push	r9
 5aa:	af 92       	push	r10
 5ac:	bf 92       	push	r11
 5ae:	cf 92       	push	r12
 5b0:	df 92       	push	r13
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	64 97       	sbiw	r28, 0x14	; 20
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	7a 8b       	std	Y+18, r23	; 0x12
 5d0:	69 8b       	std	Y+17, r22	; 0x11
 5d2:	3a 01       	movw	r6, r20
		unsigned char next_pattern[8];
			for(int idx = 0; idx < message_size; idx++){
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	0c f0       	brlt	.+2      	; 0x5dc <slidePattern+0x42>
 5da:	a6 c0       	rjmp	.+332    	; 0x728 <slidePattern+0x18e>
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 5dc:	9c 01       	movw	r18, r24
 5de:	2f 5f       	subi	r18, 0xFF	; 255
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	38 8b       	std	Y+16, r19	; 0x10
 5e4:	2f 87       	std	Y+15, r18	; 0x0f
		unsigned char next_pattern[8];
			for(int idx = 0; idx < message_size; idx++){
 5e6:	ee 24       	eor	r14, r14
 5e8:	ff 24       	eor	r15, r15
 5ea:	8a e8       	ldi	r24, 0x8A	; 138
 5ec:	90 e0       	ldi	r25, 0x00	; 0
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 5ee:	58 2e       	mov	r5, r24
 5f0:	49 2e       	mov	r4, r25
				//read the first pattern
				for(uint8_t i = 0; i< NUM_ROWS; i++){
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
				}
				//read the next pattern
				if(idx < message_size - 1){
 5f2:	5b 01       	movw	r10, r22
 5f4:	08 94       	sec
 5f6:	a1 08       	sbc	r10, r1
 5f8:	b1 08       	sbc	r11, r1
 5fa:	de 01       	movw	r26, r28
 5fc:	11 96       	adiw	r26, 0x01	; 1
 5fe:	ba 87       	std	Y+10, r27	; 0x0a
 600:	a9 87       	std	Y+9, r26	; 0x09
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 602:	fe 01       	movw	r30, r28
 604:	39 96       	adiw	r30, 0x09	; 9
 606:	fc 87       	std	Y+12, r31	; 0x0c
 608:	eb 87       	std	Y+11, r30	; 0x0b
				if(idx < message_size - 1){
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
					}
				}
				for(uint8_t j = 0; j <= NUM_COLS; j++){
 60a:	88 24       	eor	r8, r8
 60c:	99 24       	eor	r9, r9
 60e:	83 94       	inc	r8
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 610:	cc 24       	eor	r12, r12
 612:	dd 24       	eor	r13, r13
 614:	68 94       	set
 616:	c3 f8       	bld	r12, 3
 618:	c8 0e       	add	r12, r24
 61a:	d9 1e       	adc	r13, r25
				if(idx < message_size - 1){
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
					}
				}
				for(uint8_t j = 0; j <= NUM_COLS; j++){
 61c:	39 84       	ldd	r3, Y+9	; 0x09
 61e:	2a 84       	ldd	r2, Y+10	; 0x0a
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 620:	8d 87       	std	Y+13, r24	; 0x0d
 622:	9e 87       	std	Y+14, r25	; 0x0e
 624:	76 c0       	rjmp	.+236    	; 0x712 <slidePattern+0x178>
 626:	04 2f       	mov	r16, r20
 628:	15 2f       	mov	r17, r21
		unsigned char next_pattern[8];
			for(int idx = 0; idx < message_size; idx++){
				//read the first pattern
				for(uint8_t i = 0; i< NUM_ROWS; i++){
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
 62a:	fb 01       	movw	r30, r22
 62c:	80 81       	ld	r24, Z
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	82 0f       	add	r24, r18
 63e:	93 1f       	adc	r25, r19
 640:	8a 5d       	subi	r24, 0xDA	; 218
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	fc 01       	movw	r30, r24
 646:	84 91       	lpm	r24, Z
 648:	8d 93       	st	X+, r24
 64a:	2f 5f       	subi	r18, 0xFF	; 255
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
		unsigned char next_pattern[8];
			for(int idx = 0; idx < message_size; idx++){
				//read the first pattern
				for(uint8_t i = 0; i< NUM_ROWS; i++){
 64e:	28 30       	cpi	r18, 0x08	; 8
 650:	31 05       	cpc	r19, r1
 652:	49 f7       	brne	.-46     	; 0x626 <slidePattern+0x8c>
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
				}
				//read the next pattern
				if(idx < message_size - 1){
 654:	ea 14       	cp	r14, r10
 656:	fb 04       	cpc	r15, r11
 658:	1c f0       	brlt	.+6      	; 0x660 <slidePattern+0xc6>
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 65a:	0f ef       	ldi	r16, 0xFF	; 255
 65c:	1f ef       	ldi	r17, 0xFF	; 255
 65e:	3e c0       	rjmp	.+124    	; 0x6dc <slidePattern+0x142>
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
				}
				//read the next pattern
				if(idx < message_size - 1){
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
 660:	d8 01       	movw	r26, r16
 662:	8c 91       	ld	r24, X
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	fc 01       	movw	r30, r24
 668:	ee 0f       	add	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 674:	ea 5d       	subi	r30, 0xDA	; 218
 676:	ff 4f       	sbci	r31, 0xFF	; 255
				//read the first pattern
				for(uint8_t i = 0; i< NUM_ROWS; i++){
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
				}
				//read the next pattern
				if(idx < message_size - 1){
 678:	de 01       	movw	r26, r28
 67a:	11 96       	adiw	r26, 0x01	; 1
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
 67c:	84 91       	lpm	r24, Z
 67e:	8d 93       	st	X+, r24
 680:	31 96       	adiw	r30, 0x01	; 1
				for(uint8_t i = 0; i< NUM_ROWS; i++){
					screen[i] = pgm_read_byte(&table[message[idx]][i]);
				}
				//read the next pattern
				if(idx < message_size - 1){
					for(uint8_t i = 0; i< NUM_ROWS; i++){
 682:	2b 85       	ldd	r18, Y+11	; 0x0b
 684:	3c 85       	ldd	r19, Y+12	; 0x0c
 686:	a2 17       	cp	r26, r18
 688:	b3 07       	cpc	r27, r19
 68a:	c1 f7       	brne	.-16     	; 0x67c <slidePattern+0xe2>
 68c:	e6 cf       	rjmp	.-52     	; 0x65a <slidePattern+0xc0>
					}
				}
				for(uint8_t j = 0; j <= NUM_COLS; j++){
					for(uint8_t i =0 ; i< NUM_ROWS; i++){
						//rotate the screen 1 column
						screen[i] >>= 1;
 68e:	20 81       	ld	r18, Z
 690:	26 95       	lsr	r18
 692:	20 83       	st	Z, r18
						if((idx < message_size - 1) && (j>0)){
 694:	ea 14       	cp	r14, r10
 696:	fb 04       	cpc	r15, r11
 698:	74 f4       	brge	.+28     	; 0x6b6 <slidePattern+0x11c>
 69a:	0f 3f       	cpi	r16, 0xFF	; 255
 69c:	61 f0       	breq	.+24     	; 0x6b6 <slidePattern+0x11c>
							//test if the bit is on in the next pattern col is set
							if(next_pattern[i] & (1<<(j-1))){
 69e:	ab 89       	ldd	r26, Y+19	; 0x13
 6a0:	bc 89       	ldd	r27, Y+20	; 0x14
 6a2:	8c 91       	ld	r24, X
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	86 23       	and	r24, r22
 6a8:	97 23       	and	r25, r23
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <slidePattern+0x11a>
									//set the bit
									screen[i] |= (1<<(NUM_COLS-1));
 6ae:	20 68       	ori	r18, 0x80	; 128
 6b0:	20 83       	st	Z, r18
 6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <slidePattern+0x11c>
								}else{
									//clear the bit
									screen[i] &= ~(1<<(NUM_COLS-1));
 6b4:	20 83       	st	Z, r18
 6b6:	31 96       	adiw	r30, 0x01	; 1
 6b8:	2b 89       	ldd	r18, Y+19	; 0x13
 6ba:	3c 89       	ldd	r19, Y+20	; 0x14
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	3c 8b       	std	Y+20, r19	; 0x14
 6c2:	2b 8b       	std	Y+19, r18	; 0x13
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
					}
				}
				for(uint8_t j = 0; j <= NUM_COLS; j++){
					for(uint8_t i =0 ; i< NUM_ROWS; i++){
 6c4:	ec 15       	cp	r30, r12
 6c6:	fd 05       	cpc	r31, r13
 6c8:	11 f7       	brne	.-60     	; 0x68e <slidePattern+0xf4>
									//clear the bit
									screen[i] &= ~(1<<(NUM_COLS-1));
								}
							}
						}
						display_pixels(screen,__delay);
 6ca:	85 2d       	mov	r24, r5
 6cc:	94 2d       	mov	r25, r4
 6ce:	b3 01       	movw	r22, r6
 6d0:	59 dd       	rcall	.-1358   	; 0x184 <display_pixels>
 6d2:	0f 5f       	subi	r16, 0xFF	; 255
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
				if(idx < message_size - 1){
					for(uint8_t i = 0; i< NUM_ROWS; i++){
						next_pattern[i] = pgm_read_byte(&table[message[idx+1]][i]);
					}
				}
				for(uint8_t j = 0; j <= NUM_COLS; j++){
 6d6:	08 30       	cpi	r16, 0x08	; 8
 6d8:	11 05       	cpc	r17, r1
 6da:	71 f0       	breq	.+28     	; 0x6f8 <slidePattern+0x15e>
 6dc:	b4 01       	movw	r22, r8
 6de:	00 2e       	mov	r0, r16
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <slidePattern+0x14c>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	0a 94       	dec	r0
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <slidePattern+0x148>
 6ea:	a3 2d       	mov	r26, r3
 6ec:	b2 2d       	mov	r27, r2
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 6ee:	ed 85       	ldd	r30, Y+13	; 0x0d
 6f0:	fe 85       	ldd	r31, Y+14	; 0x0e
 6f2:	bc 8b       	std	Y+20, r27	; 0x14
 6f4:	ab 8b       	std	Y+19, r26	; 0x13
 6f6:	cb cf       	rjmp	.-106    	; 0x68e <slidePattern+0xf4>
		unsigned char next_pattern[8];
			for(int idx = 0; idx < message_size; idx++){
 6f8:	08 94       	sec
 6fa:	e1 1c       	adc	r14, r1
 6fc:	f1 1c       	adc	r15, r1
 6fe:	8f 85       	ldd	r24, Y+15	; 0x0f
 700:	98 89       	ldd	r25, Y+16	; 0x10
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	98 8b       	std	Y+16, r25	; 0x10
 706:	8f 87       	std	Y+15, r24	; 0x0f
 708:	a9 89       	ldd	r26, Y+17	; 0x11
 70a:	ba 89       	ldd	r27, Y+18	; 0x12
 70c:	ea 16       	cp	r14, r26
 70e:	fb 06       	cpc	r15, r27
 710:	59 f0       	breq	.+22     	; 0x728 <slidePattern+0x18e>
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		             
		void slidePattern(uint8_t message[], int message_size, int __delay) {
 712:	a5 2d       	mov	r26, r5
 714:	b4 2d       	mov	r27, r4
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	4f 85       	ldd	r20, Y+15	; 0x0f
 71c:	58 89       	ldd	r21, Y+16	; 0x10
 71e:	6f 85       	ldd	r22, Y+15	; 0x0f
 720:	78 89       	ldd	r23, Y+16	; 0x10
 722:	61 50       	subi	r22, 0x01	; 1
 724:	70 40       	sbci	r23, 0x00	; 0
 726:	7f cf       	rjmp	.-258    	; 0x626 <slidePattern+0x8c>
						}
						display_pixels(screen,__delay);
					}      		
			}
							
		}// end slide_pattern function
 728:	64 96       	adiw	r28, 0x14	; 20
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	cf 90       	pop	r12
 744:	bf 90       	pop	r11
 746:	af 90       	pop	r10
 748:	9f 90       	pop	r9
 74a:	8f 90       	pop	r8
 74c:	7f 90       	pop	r7
 74e:	6f 90       	pop	r6
 750:	5f 90       	pop	r5
 752:	4f 90       	pop	r4
 754:	3f 90       	pop	r3
 756:	2f 90       	pop	r2
 758:	08 95       	ret

0000075a <show_maxscore>:
							break;  
					  }	
			  //show placa number					  
			  slidePattern(score_number,score_size+1,SLIDE_DELAY_MESSAGE*2);
		}
		void show_maxscore(){              //     M  A  X      S  C  0 R  E   :
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
 762:	60 97       	sbiw	r28, 0x10	; 16
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
				uint8_t maxscore_message[11] = {16,17,13,19,16,20,14,0,15,18,10};
 76e:	de 01       	movw	r26, r28
 770:	11 96       	adiw	r26, 0x01	; 1
 772:	e0 e6       	ldi	r30, 0x60	; 96
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	8b e0       	ldi	r24, 0x0B	; 11
 778:	01 90       	ld	r0, Z+
 77a:	0d 92       	st	X+, r0
 77c:	81 50       	subi	r24, 0x01	; 1
 77e:	e1 f7       	brne	.-8      	; 0x778 <show_maxscore+0x1e>
				uint8_t maxscore_number[4];
				uint8_t maxscore_size;
				//put EEPROM data to this variable (max score stored)
				volatile uint8_t maxscore = eeprom_read_byte((uint8_t*)EEADDR_MAXSCORE);;
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	ea d3       	rcall	.+2004   	; 0xf5a <__eerd_byte_m8>
 786:	88 8b       	std	Y+16, r24	; 0x10
	
				//show max score messsage
				slidePattern(maxscore_message,11,SLIDE_DELAY_MESSAGE);
 788:	ce 01       	movw	r24, r28
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	6b e0       	ldi	r22, 0x0B	; 11
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	44 e6       	ldi	r20, 0x64	; 100
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	02 df       	rcall	.-508    	; 0x59a <slidePattern>
				if(maxscore > 9){
 796:	88 89       	ldd	r24, Y+16	; 0x10
 798:	8a 30       	cpi	r24, 0x0A	; 10
 79a:	b0 f1       	brcs	.+108    	; 0x808 <show_maxscore+0xae>
					if(maxscore > 99){
 79c:	88 89       	ldd	r24, Y+16	; 0x10
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	e0 f4       	brcc	.+56     	; 0x7da <show_maxscore+0x80>
					}
				}else{
					maxscore_size = 1;
				}
				//clear screen
				maxscore_number[0] = 16;
 7a2:	80 e1       	ldi	r24, 0x10	; 16
 7a4:	8c 87       	std	Y+12, r24	; 0x0c
				switch(maxscore_size){
					case 1:
						maxscore_number[1] = maxscore;
						break;
					case 2:
						maxscore_number[1] = maxscore/10;
 7a6:	88 89       	ldd	r24, Y+16	; 0x10
 7a8:	2a e0       	ldi	r18, 0x0A	; 10
 7aa:	62 2f       	mov	r22, r18
 7ac:	d7 d1       	rcall	.+942    	; 0xb5c <__udivmodqi4>
 7ae:	8d 87       	std	Y+13, r24	; 0x0d
						maxscore_number[2] = maxscore%10;
 7b0:	88 89       	ldd	r24, Y+16	; 0x10
 7b2:	d4 d1       	rcall	.+936    	; 0xb5c <__udivmodqi4>
 7b4:	9e 87       	std	Y+14, r25	; 0x0e
				slidePattern(maxscore_message,11,SLIDE_DELAY_MESSAGE);
				if(maxscore > 9){
					if(maxscore > 99){
						maxscore_size = 3;
					}else{
						maxscore_size = 2;
 7b6:	62 e0       	ldi	r22, 0x02	; 2
						maxscore_number[2] = (maxscore%100)/10;
						maxscore_number[3] = (maxscore%100)%10;
						break;
				}
				//show placar number
				slidePattern(maxscore_number,maxscore_size+1,SLIDE_DELAY_MESSAGE*2);
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	6f 5f       	subi	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	ce 01       	movw	r24, r28
 7c0:	0c 96       	adiw	r24, 0x0c	; 12
 7c2:	48 ec       	ldi	r20, 0xC8	; 200
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	e9 de       	rcall	.-558    	; 0x59a <slidePattern>
		}
 7c8:	60 96       	adiw	r28, 0x10	; 16
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	f8 94       	cli
 7ce:	de bf       	out	0x3e, r29	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	cd bf       	out	0x3d, r28	; 61
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret
					}
				}else{
					maxscore_size = 1;
				}
				//clear screen
				maxscore_number[0] = 16;
 7da:	80 e1       	ldi	r24, 0x10	; 16
 7dc:	8c 87       	std	Y+12, r24	; 0x0c
					case 2:
						maxscore_number[1] = maxscore/10;
						maxscore_number[2] = maxscore%10;
						break;
					case 3:
						maxscore_number[1] = maxscore/100;
 7de:	88 89       	ldd	r24, Y+16	; 0x10
 7e0:	24 e6       	ldi	r18, 0x64	; 100
 7e2:	62 2f       	mov	r22, r18
 7e4:	bb d1       	rcall	.+886    	; 0xb5c <__udivmodqi4>
 7e6:	8d 87       	std	Y+13, r24	; 0x0d
						maxscore_number[2] = (maxscore%100)/10;
 7e8:	88 89       	ldd	r24, Y+16	; 0x10
 7ea:	b8 d1       	rcall	.+880    	; 0xb5c <__udivmodqi4>
 7ec:	89 2f       	mov	r24, r25
 7ee:	3a e0       	ldi	r19, 0x0A	; 10
 7f0:	63 2f       	mov	r22, r19
 7f2:	b4 d1       	rcall	.+872    	; 0xb5c <__udivmodqi4>
 7f4:	8e 87       	std	Y+14, r24	; 0x0e
						maxscore_number[3] = (maxscore%100)%10;
 7f6:	88 89       	ldd	r24, Y+16	; 0x10
 7f8:	62 2f       	mov	r22, r18
 7fa:	b0 d1       	rcall	.+864    	; 0xb5c <__udivmodqi4>
 7fc:	89 2f       	mov	r24, r25
 7fe:	63 2f       	mov	r22, r19
 800:	ad d1       	rcall	.+858    	; 0xb5c <__udivmodqi4>
 802:	9f 87       	std	Y+15, r25	; 0x0f
	
				//show max score messsage
				slidePattern(maxscore_message,11,SLIDE_DELAY_MESSAGE);
				if(maxscore > 9){
					if(maxscore > 99){
						maxscore_size = 3;
 804:	63 e0       	ldi	r22, 0x03	; 3
						break;
					case 3:
						maxscore_number[1] = maxscore/100;
						maxscore_number[2] = (maxscore%100)/10;
						maxscore_number[3] = (maxscore%100)%10;
						break;
 806:	d8 cf       	rjmp	.-80     	; 0x7b8 <show_maxscore+0x5e>
					}
				}else{
					maxscore_size = 1;
				}
				//clear screen
				maxscore_number[0] = 16;
 808:	80 e1       	ldi	r24, 0x10	; 16
 80a:	8c 87       	std	Y+12, r24	; 0x0c
	
				switch(maxscore_size){
					case 1:
						maxscore_number[1] = maxscore;
 80c:	88 89       	ldd	r24, Y+16	; 0x10
 80e:	8d 87       	std	Y+13, r24	; 0x0d
						maxscore_size = 3;
					}else{
						maxscore_size = 2;
					}
				}else{
					maxscore_size = 1;
 810:	61 e0       	ldi	r22, 0x01	; 1
				maxscore_number[0] = 16;
	
				switch(maxscore_size){
					case 1:
						maxscore_number[1] = maxscore;
						break;
 812:	d2 cf       	rjmp	.-92     	; 0x7b8 <show_maxscore+0x5e>

00000814 <show_score>:
			while(1){
				show_score();
				show_maxscore();
			}		
		}
		void show_score(){              //    P  L  A  C   A  R  :                 
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	2c 97       	sbiw	r28, 0x0c	; 12
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
		      uint8_t score_message[8] = {16,11,12,13,14,13,15,10};
 828:	de 01       	movw	r26, r28
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	eb e6       	ldi	r30, 0x6B	; 107
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	88 e0       	ldi	r24, 0x08	; 8
 832:	01 90       	ld	r0, Z+
 834:	0d 92       	st	X+, r0
 836:	81 50       	subi	r24, 0x01	; 1
 838:	e1 f7       	brne	.-8      	; 0x832 <show_score+0x1e>
			  uint8_t score_number[4];
			  uint8_t score_size,aux;
		      
			  //show placar messsage
			  slidePattern(score_message,8,SLIDE_DELAY_MESSAGE);
 83a:	ce 01       	movw	r24, r28
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	68 e0       	ldi	r22, 0x08	; 8
 840:	70 e0       	ldi	r23, 0x00	; 0
 842:	44 e6       	ldi	r20, 0x64	; 100
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	a9 de       	rcall	.-686    	; 0x59a <slidePattern>
			  if(score > 9){
 848:	80 91 88 00 	lds	r24, 0x0088
 84c:	90 91 89 00 	lds	r25, 0x0089
 850:	8a 30       	cpi	r24, 0x0A	; 10
 852:	91 05       	cpc	r25, r1
 854:	48 f1       	brcs	.+82     	; 0x8a8 <show_score+0x94>
				  if(score > 99){
 856:	84 36       	cpi	r24, 0x64	; 100
 858:	91 05       	cpc	r25, r1
 85a:	c8 f4       	brcc	.+50     	; 0x88e <show_score+0x7a>
				  }
			  }else{
				  score_size = 1;
			  }		
			          //clear screen
			          score_number[0] = 16;
 85c:	20 e1       	ldi	r18, 0x10	; 16
 85e:	29 87       	std	Y+9, r18	; 0x09
				      switch(score_size){
						  case 1:
						    score_number[1] = score;
							break;
						  case 2:
						    score_number[1] = score/10;
 860:	6a e0       	ldi	r22, 0x0A	; 10
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	87 d1       	rcall	.+782    	; 0xb74 <__udivmodhi4>
 866:	6a 87       	std	Y+10, r22	; 0x0a
							score_number[2] = score%10;
 868:	8b 87       	std	Y+11, r24	; 0x0b
			  slidePattern(score_message,8,SLIDE_DELAY_MESSAGE);
			  if(score > 9){
				  if(score > 99){
					score_size = 3;  
				  }else{
					  score_size = 2;
 86a:	62 e0       	ldi	r22, 0x02	; 2
							score_number[2] = (score%100)/10;
							score_number[3] = (score%100)%10;
							break;  
					  }	
			  //show placa number					  
			  slidePattern(score_number,score_size+1,SLIDE_DELAY_MESSAGE*2);
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	ce 01       	movw	r24, r28
 874:	09 96       	adiw	r24, 0x09	; 9
 876:	48 ec       	ldi	r20, 0xC8	; 200
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	8f de       	rcall	.-738    	; 0x59a <slidePattern>
		}
 87c:	2c 96       	adiw	r28, 0x0c	; 12
 87e:	0f b6       	in	r0, 0x3f	; 63
 880:	f8 94       	cli
 882:	de bf       	out	0x3e, r29	; 62
 884:	0f be       	out	0x3f, r0	; 63
 886:	cd bf       	out	0x3d, r28	; 61
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	08 95       	ret
				  }
			  }else{
				  score_size = 1;
			  }		
			          //clear screen
			          score_number[0] = 16;
 88e:	20 e1       	ldi	r18, 0x10	; 16
 890:	29 87       	std	Y+9, r18	; 0x09
						  case 2:
						    score_number[1] = score/10;
							score_number[2] = score%10;
							break;
						  case 3:
						    score_number[1] = score/100;
 892:	64 e6       	ldi	r22, 0x64	; 100
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	6e d1       	rcall	.+732    	; 0xb74 <__udivmodhi4>
 898:	6a 87       	std	Y+10, r22	; 0x0a
							score_number[2] = (score%100)/10;
 89a:	6a e0       	ldi	r22, 0x0A	; 10
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	6a d1       	rcall	.+724    	; 0xb74 <__udivmodhi4>
 8a0:	6b 87       	std	Y+11, r22	; 0x0b
							score_number[3] = (score%100)%10;
 8a2:	8c 87       	std	Y+12, r24	; 0x0c
		      
			  //show placar messsage
			  slidePattern(score_message,8,SLIDE_DELAY_MESSAGE);
			  if(score > 9){
				  if(score > 99){
					score_size = 3;  
 8a4:	63 e0       	ldi	r22, 0x03	; 3
							break;
						  case 3:
						    score_number[1] = score/100;
							score_number[2] = (score%100)/10;
							score_number[3] = (score%100)%10;
							break;  
 8a6:	e2 cf       	rjmp	.-60     	; 0x86c <show_score+0x58>
				  }
			  }else{
				  score_size = 1;
			  }		
			          //clear screen
			          score_number[0] = 16;
 8a8:	90 e1       	ldi	r25, 0x10	; 16
 8aa:	99 87       	std	Y+9, r25	; 0x09
					  
				      switch(score_size){
						  case 1:
						    score_number[1] = score;
 8ac:	8a 87       	std	Y+10, r24	; 0x0a
					score_size = 3;  
				  }else{
					  score_size = 2;
				  }
			  }else{
				  score_size = 1;
 8ae:	61 e0       	ldi	r22, 0x01	; 1
			          score_number[0] = 16;
					  
				      switch(score_size){
						  case 1:
						    score_number[1] = score;
							break;
 8b0:	dd cf       	rjmp	.-70     	; 0x86c <show_score+0x58>

000008b2 <game_over>:
			//clear the screen
			for(uint8_t i =0 ; i < NUM_ROWS; i++){
				screen[i] = clearscreen[i];
			}
		}
		void game_over(){
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	29 97       	sbiw	r28, 0x09	; 9
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	f8 94       	cli
 8c0:	de bf       	out	0x3e, r29	; 62
 8c2:	0f be       	out	0x3f, r0	; 63
 8c4:	cd bf       	out	0x3d, r28	; 61
			unsigned char x[NUM_ROWS] = X;
 8c6:	de 01       	movw	r26, r28
 8c8:	11 96       	adiw	r26, 0x01	; 1
 8ca:	e3 e7       	ldi	r30, 0x73	; 115
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	88 e0       	ldi	r24, 0x08	; 8
 8d0:	01 90       	ld	r0, Z+
 8d2:	0d 92       	st	X+, r0
 8d4:	81 50       	subi	r24, 0x01	; 1
 8d6:	e1 f7       	brne	.-8      	; 0x8d0 <game_over+0x1e>
			uint8_t count = 3;
			//put EEPROM data to this variable (max score stored)
			volatile uint8_t maxscore;
			
			//read from EEPROM
			maxscore = eeprom_read_byte((uint8_t*)EEADDR_MAXSCORE);
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	91 e0       	ldi	r25, 0x01	; 1
 8dc:	3e d3       	rcall	.+1660   	; 0xf5a <__eerd_byte_m8>
 8de:	89 87       	std	Y+9, r24	; 0x09
			if(score > maxscore){
 8e0:	89 85       	ldd	r24, Y+9	; 0x09
 8e2:	60 91 88 00 	lds	r22, 0x0088
 8e6:	70 91 89 00 	lds	r23, 0x0089
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	86 17       	cp	r24, r22
 8ee:	97 07       	cpc	r25, r23
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <game_over+0x46>
				//write EEPROM
				eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, score);
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	39 d3       	rcall	.+1650   	; 0xf6a <__eewr_byte_m8>
			//clear the screen
			for(uint8_t i =0 ; i < NUM_ROWS; i++){
				screen[i] = clearscreen[i];
			}
		}
		void game_over(){
 8f8:	0f 2e       	mov	r0, r31
 8fa:	f3 e0       	ldi	r31, 0x03	; 3
 8fc:	df 2e       	mov	r13, r31
 8fe:	f0 2d       	mov	r31, r0
			maxscore = eeprom_read_byte((uint8_t*)EEADDR_MAXSCORE);
			if(score > maxscore){
				//write EEPROM
				eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, score);
			}
			while(count--){
 900:	0a e8       	ldi	r16, 0x8A	; 138
 902:	10 e0       	ldi	r17, 0x00	; 0
			//clear the screen
			for(uint8_t i =0 ; i < NUM_ROWS; i++){
				screen[i] = clearscreen[i];
			}
		}
		void game_over(){
 904:	0f 2e       	mov	r0, r31
 906:	f9 e0       	ldi	r31, 0x09	; 9
 908:	ef 2e       	mov	r14, r31
 90a:	ff 24       	eor	r15, r15
 90c:	f0 2d       	mov	r31, r0
 90e:	ec 0e       	add	r14, r28
 910:	fd 1e       	adc	r15, r29
 912:	10 c0       	rjmp	.+32     	; 0x934 <game_over+0x82>
				eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, score);
			}
			while(count--){
				//print X on the screen
				for(uint8_t i=0; i< NUM_ROWS; i++){
					screen[i] = x[i];
 914:	81 91       	ld	r24, Z+
 916:	8d 93       	st	X+, r24
				//write EEPROM
				eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, score);
			}
			while(count--){
				//print X on the screen
				for(uint8_t i=0; i< NUM_ROWS; i++){
 918:	ee 15       	cp	r30, r14
 91a:	ff 05       	cpc	r31, r15
 91c:	d9 f7       	brne	.-10     	; 0x914 <game_over+0x62>
					screen[i] = x[i];
				}
				display_pixels(screen,SLIDE_DELAY_SCREEN);
 91e:	c8 01       	movw	r24, r16
 920:	68 ee       	ldi	r22, 0xE8	; 232
 922:	73 e0       	ldi	r23, 0x03	; 3
 924:	2f dc       	rcall	.-1954   	; 0x184 <display_pixels>
				clear_screen();
 926:	bb dd       	rcall	.-1162   	; 0x49e <clear_screen>
				display_pixels(screen,SLIDE_DELAY_SCREEN);
 928:	c8 01       	movw	r24, r16
 92a:	68 ee       	ldi	r22, 0xE8	; 232
 92c:	73 e0       	ldi	r23, 0x03	; 3
 92e:	2a dc       	rcall	.-1964   	; 0x184 <display_pixels>
 930:	da 94       	dec	r13
			maxscore = eeprom_read_byte((uint8_t*)EEADDR_MAXSCORE);
			if(score > maxscore){
				//write EEPROM
				eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, score);
			}
			while(count--){
 932:	21 f0       	breq	.+8      	; 0x93c <game_over+0x8a>
 934:	fe 01       	movw	r30, r28
 936:	31 96       	adiw	r30, 0x01	; 1
 938:	d8 01       	movw	r26, r16
 93a:	ec cf       	rjmp	.-40     	; 0x914 <game_over+0x62>
				display_pixels(screen,SLIDE_DELAY_SCREEN);
				clear_screen();
				display_pixels(screen,SLIDE_DELAY_SCREEN);
			}	
			while(1){
				show_score();
 93c:	6b df       	rcall	.-298    	; 0x814 <show_score>
				show_maxscore();
 93e:	0d df       	rcall	.-486    	; 0x75a <show_maxscore>
 940:	fd cf       	rjmp	.-6      	; 0x93c <game_over+0x8a>

00000942 <move>:
			screen[row] |= _BV(col);
		}
		void off(unsigned char screen[NUM_ROWS], uint8_t row, uint8_t col){
			screen[row] &= ~_BV(col);
		}
		void move(unsigned char direction,struct snake_cell *pHead,unsigned long count){
 942:	af 92       	push	r10
 944:	bf 92       	push	r11
 946:	cf 92       	push	r12
 948:	df 92       	push	r13
 94a:	ef 92       	push	r14
 94c:	ff 92       	push	r15
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	8b 01       	movw	r16, r22
 958:	69 01       	movw	r12, r18
 95a:	7a 01       	movw	r14, r20
			    uint8_t row,col, prev_row, prev_col;
				struct snake_cell *pAux, *pAux2;
				uint8_t growup = NO;
				unsigned char i;
				
				row = pHead->row;
 95c:	fb 01       	movw	r30, r22
 95e:	60 81       	ld	r22, Z
				col = pHead->col;
 960:	72 81       	ldd	r23, Z+2	; 0x02
				if(direction == UP){
 962:	88 23       	and	r24, r24
 964:	29 f4       	brne	.+10     	; 0x970 <move+0x2e>
					if(row == 0){
 966:	66 23       	and	r22, r22
 968:	09 f4       	brne	.+2      	; 0x96c <move+0x2a>
					     //colision with wall
						 #ifndef __EASY__
							game_over();
 96a:	a3 df       	rcall	.-186    	; 0x8b2 <game_over>
						 #endif
						 //or start on the other side
						 row = NUM_ROWS-1;	
					}else{
						row--;
 96c:	61 50       	subi	r22, 0x01	; 1
 96e:	14 c0       	rjmp	.+40     	; 0x998 <move+0x56>
					}	
				}else{
					if(direction == DOWN){
 970:	81 30       	cpi	r24, 0x01	; 1
 972:	29 f4       	brne	.+10     	; 0x97e <move+0x3c>
						   if(row == NUM_ROWS-1){
 974:	67 30       	cpi	r22, 0x07	; 7
 976:	09 f4       	brne	.+2      	; 0x97a <move+0x38>
							  //colision with wall
						      #ifndef __EASY__
							      game_over();
 978:	9c df       	rcall	.-200    	; 0x8b2 <game_over>
						      #endif

							 //or start on the other side
							 row = 0;   
						   }else{
							   row++;
 97a:	6f 5f       	subi	r22, 0xFF	; 255
 97c:	0d c0       	rjmp	.+26     	; 0x998 <move+0x56>
						   }
					}else{
						 if(direction == LEFT){
 97e:	82 30       	cpi	r24, 0x02	; 2
 980:	29 f4       	brne	.+10     	; 0x98c <move+0x4a>
						      if(col == 0){
 982:	77 23       	and	r23, r23
 984:	09 f4       	brne	.+2      	; 0x988 <move+0x46>
									//colision with wall
								    #ifndef __EASY__
									    game_over();
 986:	95 df       	rcall	.-214    	; 0x8b2 <game_over>
								    #endif
	
									//or start on the other side
									col = NUM_COLS - 1;  
							   }else{
								  col--;   
 988:	71 50       	subi	r23, 0x01	; 1
 98a:	06 c0       	rjmp	.+12     	; 0x998 <move+0x56>
							   }								   	 
						 }else{
							 if(direction == RIGHT){
 98c:	83 30       	cpi	r24, 0x03	; 3
 98e:	21 f4       	brne	.+8      	; 0x998 <move+0x56>
									if(col == NUM_COLS - 1){
 990:	77 30       	cpi	r23, 0x07	; 7
 992:	09 f4       	brne	.+2      	; 0x996 <move+0x54>
										//colision with wall
										#ifndef __EASY__
											game_over();
 994:	8e df       	rcall	.-228    	; 0x8b2 <game_over>
										#endif

										//or start on the other side
										col = 0;	
									}else{
										col++;	
 996:	7f 5f       	subi	r23, 0xFF	; 255
							  }								 	 
						 }
					}					
				}
				//check colision
				i = size; //i = size of the snake
 998:	a0 91 7b 00 	lds	r26, 0x007B
				pAux = pHead;
				while(i--){
 99c:	aa 23       	and	r26, r26
 99e:	b1 f0       	breq	.+44     	; 0x9cc <move+0x8a>
 9a0:	ba 2f       	mov	r27, r26
						 }
					}					
				}
				//check colision
				i = size; //i = size of the snake
				pAux = pHead;
 9a2:	f8 01       	movw	r30, r16
				while(i--){
					if((pAux->row == row) && (pAux->col == col)){
 9a4:	26 2f       	mov	r18, r22
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	47 2f       	mov	r20, r23
 9aa:	50 e0       	ldi	r21, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	91 81       	ldd	r25, Z+1	; 0x01
 9b0:	82 17       	cp	r24, r18
 9b2:	93 07       	cpc	r25, r19
 9b4:	31 f4       	brne	.+12     	; 0x9c2 <move+0x80>
 9b6:	82 81       	ldd	r24, Z+2	; 0x02
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	84 17       	cp	r24, r20
 9bc:	95 07       	cpc	r25, r21
 9be:	09 f4       	brne	.+2      	; 0x9c2 <move+0x80>
						#ifndef __EASY__
							game_over();
 9c0:	78 df       	rcall	.-272    	; 0x8b2 <game_over>
						#endif
					}
					pAux = pAux->next;
 9c2:	04 80       	ldd	r0, Z+4	; 0x04
 9c4:	f5 81       	ldd	r31, Z+5	; 0x05
 9c6:	e0 2d       	mov	r30, r0
 9c8:	b1 50       	subi	r27, 0x01	; 1
					}					
				}
				//check colision
				i = size; //i = size of the snake
				pAux = pHead;
				while(i--){
 9ca:	81 f7       	brne	.-32     	; 0x9ac <move+0x6a>
					}
					pAux = pAux->next;
				}
								
				// check if the snake eat the fruit
				if((row == fruit_row) && (col == fruit_col)){ 
 9cc:	80 91 95 00 	lds	r24, 0x0095
 9d0:	68 17       	cp	r22, r24
 9d2:	91 f4       	brne	.+36     	; 0x9f8 <move+0xb6>
 9d4:	80 91 92 00 	lds	r24, 0x0092
 9d8:	78 17       	cp	r23, r24
 9da:	81 f4       	brne	.+32     	; 0x9fc <move+0xba>
				      	growup = YES;
						score += FRUIT_VALUE; //if yes, give the prize
 9dc:	80 91 88 00 	lds	r24, 0x0088
 9e0:	90 91 89 00 	lds	r25, 0x0089
 9e4:	05 96       	adiw	r24, 0x05	; 5
 9e6:	90 93 89 00 	sts	0x0089, r25
 9ea:	80 93 88 00 	sts	0x0088, r24
						size++;
 9ee:	af 5f       	subi	r26, 0xFF	; 255
 9f0:	a0 93 7b 00 	sts	0x007B, r26
					pAux = pAux->next;
				}
								
				// check if the snake eat the fruit
				if((row == fruit_row) && (col == fruit_col)){ 
				      	growup = YES;
 9f4:	41 e0       	ldi	r20, 0x01	; 1
 9f6:	03 c0       	rjmp	.+6      	; 0x9fe <move+0xbc>
			screen[row] &= ~_BV(col);
		}
		void move(unsigned char direction,struct snake_cell *pHead,unsigned long count){
			    uint8_t row,col, prev_row, prev_col;
				struct snake_cell *pAux, *pAux2;
				uint8_t growup = NO;
 9f8:	40 e0       	ldi	r20, 0x00	; 0
 9fa:	01 c0       	rjmp	.+2      	; 0x9fe <move+0xbc>
 9fc:	40 e0       	ldi	r20, 0x00	; 0
						score += FRUIT_VALUE; //if yes, give the prize
						size++;
				}
				
				//move the snake_cell's coordenates forward
				prev_row = pHead->row;
 9fe:	f8 01       	movw	r30, r16
 a00:	80 81       	ld	r24, Z
				prev_col = pHead->col;
 a02:	92 81       	ldd	r25, Z+2	; 0x02
				pHead->row = row;
 a04:	60 83       	st	Z, r22
 a06:	11 82       	std	Z+1, r1	; 0x01
				pHead->col = col;
 a08:	72 83       	std	Z+2, r23	; 0x02
 a0a:	13 82       	std	Z+3, r1	; 0x03
				row = prev_row;
				col = prev_col;
				pAux = pHead->next;
 a0c:	c4 81       	ldd	r28, Z+4	; 0x04
 a0e:	d5 81       	ldd	r29, Z+5	; 0x05
				while(pAux != NULL){
 a10:	20 97       	sbiw	r28, 0x00	; 0
 a12:	19 f4       	brne	.+6      	; 0xa1a <move+0xd8>
 a14:	2b c0       	rjmp	.+86     	; 0xa6c <move+0x12a>
					prev_row = pAux->row;
					prev_col = pAux->col;
 a16:	92 2f       	mov	r25, r18
				pHead->col = col;
				row = prev_row;
				col = prev_col;
				pAux = pHead->next;
				while(pAux != NULL){
					prev_row = pAux->row;
 a18:	83 2f       	mov	r24, r19
 a1a:	38 81       	ld	r19, Y
					prev_col = pAux->col;
 a1c:	2a 81       	ldd	r18, Y+2	; 0x02
					pAux->row = row;
 a1e:	88 83       	st	Y, r24
 a20:	19 82       	std	Y+1, r1	; 0x01
					pAux->col = col;
 a22:	9a 83       	std	Y+2, r25	; 0x02
 a24:	1b 82       	std	Y+3, r1	; 0x03
					row = prev_row;
					col = prev_col;
					pAux = pAux->next;
 a26:	0c 80       	ldd	r0, Y+4	; 0x04
 a28:	dd 81       	ldd	r29, Y+5	; 0x05
 a2a:	c0 2d       	mov	r28, r0
					if(pAux->next == NULL){
 a2c:	8c 81       	ldd	r24, Y+4	; 0x04
 a2e:	9d 81       	ldd	r25, Y+5	; 0x05
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	d1 f4       	brne	.+52     	; 0xa68 <move+0x126>
						if(growup == YES){ //increase 1 snake_cell
 a34:	41 30       	cpi	r20, 0x01	; 1
 a36:	c1 f4       	brne	.+48     	; 0xa68 <move+0x126>
							prev_row = pAux->row;
 a38:	b8 80       	ld	r11, Y
							prev_col = pAux->col;
 a3a:	aa 80       	ldd	r10, Y+2	; 0x02
							pAux->row = row;
 a3c:	38 83       	st	Y, r19
 a3e:	19 82       	std	Y+1, r1	; 0x01
							pAux->col = col;
 a40:	2a 83       	std	Y+2, r18	; 0x02
 a42:	1b 82       	std	Y+3, r1	; 0x03
						   pAux2 = (struct snake_cell *) malloc(sizeof(struct snake_cell));
 a44:	86 e0       	ldi	r24, 0x06	; 6
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	f9 d0       	rcall	.+498    	; 0xc3c <malloc>
 a4a:	e8 2f       	mov	r30, r24
 a4c:	f9 2f       	mov	r31, r25
						   pAux2->row = prev_row;
 a4e:	b0 82       	st	Z, r11
 a50:	11 82       	std	Z+1, r1	; 0x01
						   pAux2->col = prev_col;
 a52:	a2 82       	std	Z+2, r10	; 0x02
 a54:	13 82       	std	Z+3, r1	; 0x03
						   pAux2->next = NULL;
 a56:	15 82       	std	Z+5, r1	; 0x05
 a58:	14 82       	std	Z+4, r1	; 0x04
						   pAux->next = pAux2;
 a5a:	fd 83       	std	Y+5, r31	; 0x05
 a5c:	ec 83       	std	Y+4, r30	; 0x04
						   create_fruit(count,pHead);
 a5e:	c7 01       	movw	r24, r14
 a60:	b6 01       	movw	r22, r12
 a62:	a8 01       	movw	r20, r16
 a64:	ce dc       	rcall	.-1636   	; 0x402 <create_fruit>
						   break;
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <move+0x12a>
				pHead->row = row;
				pHead->col = col;
				row = prev_row;
				col = prev_col;
				pAux = pHead->next;
				while(pAux != NULL){
 a68:	20 97       	sbiw	r28, 0x00	; 0
 a6a:	a9 f6       	brne	.-86     	; 0xa16 <move+0xd4>
						   create_fruit(count,pHead);
						   break;
						}
					}	
				}
		}//end move function
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	ff 90       	pop	r15
 a76:	ef 90       	pop	r14
 a78:	df 90       	pop	r13
 a7a:	cf 90       	pop	r12
 a7c:	bf 90       	pop	r11
 a7e:	af 90       	pop	r10
 a80:	08 95       	ret

00000a82 <main>:
	    const unsigned char table[NUM_SIMBOLS][8] PROGMEM = {{24,36,36,36,36,36,24,0},{16,24,20,16,16,16,16,0},{60,32,32,60,4,4,60,0},{60,32,32,56,32,32,60,0},{36,36,36,60,32,32,32,0},{60,4,4,60,32,32,60,0}, {16,8,4,28,36,36,24,0},{60,36,32,16,8,8,8,0},{60,36,36,60,36,36,60,0},{60,36,36,60,32,32,60,0},{0,0,24,24,0,24,24,0},{60,36,36,60,4,4,4,0},{4,4,4,4,4,4,60,0},{60,36,36,60,36,36,36,0},{60,4,4,4,4,4,60,0},{60,36,36,60,20,36,36,0},CLEARSCREEN,{99,85,73,65,65,65,65,0},{60,4,4,60,4,4,60,0},{66,36,24,24,36,66,129,0},{56,4,4,24,32,32,28,0}};
	                                                                                                                                                                             //{60,4,4,60,36,36,60,0}                                                                                                                                                                                                                                                                              
		//Main Function
		//================================================================				   
	   int main (void)
	   {
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	0f 92       	push	r0
 a88:	cd b7       	in	r28, 0x3d	; 61
 a8a:	de b7       	in	r29, 0x3e	; 62
	   }//end main function
	   //=========================================================================
	   
	   void ioinit (void)
	   {
		   DDRC  = 0b00000111; //1 = output, 0 = input
 a8c:	87 e0       	ldi	r24, 0x07	; 7
 a8e:	84 bb       	out	0x14, r24	; 20
		   PORTC = 0b00000000;
 a90:	15 ba       	out	0x15, r1	; 21
		   DDRB  = 0; //all pins input
 a92:	17 ba       	out	0x17, r1	; 23
		   PORTB = 0xFF;
 a94:	8f ef       	ldi	r24, 0xFF	; 255
 a96:	88 bb       	out	0x18, r24	; 24
		   DDRD = 0;
 a98:	11 ba       	out	0x11, r1	; 17
		   PORTD = 0xFF;
 a9a:	82 bb       	out	0x12, r24	; 18
			   
		   ioinit(); //Setup IO pins and defaults
		   //slidePattern(letras,16,1000);
		   
		   //read from EEPROM
		   EEByte = eeprom_read_byte((uint8_t*)EEADDR_MAXSCORE);
 a9c:	8f ef       	ldi	r24, 0xFF	; 255
 a9e:	91 e0       	ldi	r25, 0x01	; 1
 aa0:	5c d2       	rcall	.+1208   	; 0xf5a <__eerd_byte_m8>
 aa2:	89 83       	std	Y+1, r24	; 0x01
		   if(EEByte == 0xFF){//if EEPROM was not setted yet, set to zero
 aa4:	89 81       	ldd	r24, Y+1	; 0x01
 aa6:	8f 3f       	cpi	r24, 0xFF	; 255
 aa8:	21 f4       	brne	.+8      	; 0xab2 <main+0x30>
			   //write EEPROM
			   eeprom_write_byte ((uint8_t*)EEADDR_MAXSCORE, 180);
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	91 e0       	ldi	r25, 0x01	; 1
 aae:	64 eb       	ldi	r22, 0xB4	; 180
 ab0:	5c d2       	rcall	.+1208   	; 0xf6a <__eewr_byte_m8>
		    }
		   face();
 ab2:	06 dd       	rcall	.-1524   	; 0x4c0 <face>
		   
		   pHead = create_snake(size,4,4,direction);
 ab4:	80 91 7b 00 	lds	r24, 0x007B
 ab8:	64 e0       	ldi	r22, 0x04	; 4
 aba:	44 e0       	ldi	r20, 0x04	; 4
 abc:	20 91 7c 00 	lds	r18, 0x007C
 ac0:	24 dc       	rcall	.-1976   	; 0x30a <create_snake>
 ac2:	ac 01       	movw	r20, r24
 ac4:	90 93 94 00 	sts	0x0094, r25
 ac8:	80 93 93 00 	sts	0x0093, r24
		   create_fruit(count,pHead);
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	cb 01       	movw	r24, r22
 ad2:	97 dc       	rcall	.-1746   	; 0x402 <create_fruit>
		   
		   while(1)
		   {
			   count++;
 ad4:	cc 24       	eor	r12, r12
 ad6:	dd 24       	eor	r13, r13
 ad8:	76 01       	movw	r14, r12
 ada:	c3 94       	inc	r12
			   if(count == 4294967294){
				    count = 0;   
			   }
					draw_snake(screen,pHead,fruit_row,fruit_col);
 adc:	0a e8       	ldi	r16, 0x8A	; 138
 ade:	10 e0       	ldi	r17, 0x00	; 0
					#if F_CPU == 1000000UL
						display_pixels(screen,SLIDE_DELAY_SCREEN + SLIDE_DELAY_SCREEN/4 - (score/2)); //accelerates according to the score 
					#else
						#if F_CPU == 16000000UL
							display_pixels(screen,SLIDE_DELAY_SCREEN + SLIDE_DELAY_SCREEN/4 - (score*5)); //accelerates according to the score
 ae0:	0f 2e       	mov	r0, r31
 ae2:	f2 ee       	ldi	r31, 0xE2	; 226
 ae4:	af 2e       	mov	r10, r31
 ae6:	f4 e0       	ldi	r31, 0x04	; 4
 ae8:	bf 2e       	mov	r11, r31
 aea:	f0 2d       	mov	r31, r0
		   
		   while(1)
		   {
			   count++;
			   if(count == 4294967294){
				    count = 0;   
 aec:	44 24       	eor	r4, r4
 aee:	55 24       	eor	r5, r5
 af0:	32 01       	movw	r6, r4
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <main+0x76>
 af4:	73 01       	movw	r14, r6
 af6:	62 01       	movw	r12, r4
			   }
					draw_snake(screen,pHead,fruit_row,fruit_col);
 af8:	60 91 93 00 	lds	r22, 0x0093
 afc:	70 91 94 00 	lds	r23, 0x0094
 b00:	c8 01       	movw	r24, r16
 b02:	40 91 95 00 	lds	r20, 0x0095
 b06:	20 91 92 00 	lds	r18, 0x0092
 b0a:	2d dd       	rcall	.-1446   	; 0x566 <draw_snake>
					#if F_CPU == 1000000UL
						display_pixels(screen,SLIDE_DELAY_SCREEN + SLIDE_DELAY_SCREEN/4 - (score/2)); //accelerates according to the score 
					#else
						#if F_CPU == 16000000UL
							display_pixels(screen,SLIDE_DELAY_SCREEN + SLIDE_DELAY_SCREEN/4 - (score*5)); //accelerates according to the score
 b0c:	80 91 88 00 	lds	r24, 0x0088
 b10:	90 91 89 00 	lds	r25, 0x0089
 b14:	9c 01       	movw	r18, r24
 b16:	22 0f       	add	r18, r18
 b18:	33 1f       	adc	r19, r19
 b1a:	22 0f       	add	r18, r18
 b1c:	33 1f       	adc	r19, r19
 b1e:	82 0f       	add	r24, r18
 b20:	93 1f       	adc	r25, r19
 b22:	b5 01       	movw	r22, r10
 b24:	68 1b       	sub	r22, r24
 b26:	79 0b       	sbc	r23, r25
 b28:	c8 01       	movw	r24, r16
 b2a:	2c db       	rcall	.-2472   	; 0x184 <display_pixels>
						#endif
					#endif
					move(direction,pHead,count);
 b2c:	60 91 93 00 	lds	r22, 0x0093
 b30:	70 91 94 00 	lds	r23, 0x0094
 b34:	80 91 7c 00 	lds	r24, 0x007C
 b38:	a7 01       	movw	r20, r14
 b3a:	96 01       	movw	r18, r12
 b3c:	02 df       	rcall	.-508    	; 0x942 <move>
		   pHead = create_snake(size,4,4,direction);
		   create_fruit(count,pHead);
		   
		   while(1)
		   {
			   count++;
 b3e:	08 94       	sec
 b40:	c1 1c       	adc	r12, r1
 b42:	d1 1c       	adc	r13, r1
 b44:	e1 1c       	adc	r14, r1
 b46:	f1 1c       	adc	r15, r1
			   if(count == 4294967294){
 b48:	8e ef       	ldi	r24, 0xFE	; 254
 b4a:	c8 16       	cp	r12, r24
 b4c:	8f ef       	ldi	r24, 0xFF	; 255
 b4e:	d8 06       	cpc	r13, r24
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	e8 06       	cpc	r14, r24
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	f8 06       	cpc	r15, r24
 b58:	79 f6       	brne	.-98     	; 0xaf8 <main+0x76>
 b5a:	cc cf       	rjmp	.-104    	; 0xaf4 <main+0x72>

00000b5c <__udivmodqi4>:
 b5c:	99 1b       	sub	r25, r25
 b5e:	79 e0       	ldi	r23, 0x09	; 9
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <__udivmodqi4_ep>

00000b62 <__udivmodqi4_loop>:
 b62:	99 1f       	adc	r25, r25
 b64:	96 17       	cp	r25, r22
 b66:	08 f0       	brcs	.+2      	; 0xb6a <__udivmodqi4_ep>
 b68:	96 1b       	sub	r25, r22

00000b6a <__udivmodqi4_ep>:
 b6a:	88 1f       	adc	r24, r24
 b6c:	7a 95       	dec	r23
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__udivmodqi4_loop>
 b70:	80 95       	com	r24
 b72:	08 95       	ret

00000b74 <__udivmodhi4>:
 b74:	aa 1b       	sub	r26, r26
 b76:	bb 1b       	sub	r27, r27
 b78:	51 e1       	ldi	r21, 0x11	; 17
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <__udivmodhi4_ep>

00000b7c <__udivmodhi4_loop>:
 b7c:	aa 1f       	adc	r26, r26
 b7e:	bb 1f       	adc	r27, r27
 b80:	a6 17       	cp	r26, r22
 b82:	b7 07       	cpc	r27, r23
 b84:	10 f0       	brcs	.+4      	; 0xb8a <__udivmodhi4_ep>
 b86:	a6 1b       	sub	r26, r22
 b88:	b7 0b       	sbc	r27, r23

00000b8a <__udivmodhi4_ep>:
 b8a:	88 1f       	adc	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	5a 95       	dec	r21
 b90:	a9 f7       	brne	.-22     	; 0xb7c <__udivmodhi4_loop>
 b92:	80 95       	com	r24
 b94:	90 95       	com	r25
 b96:	bc 01       	movw	r22, r24
 b98:	cd 01       	movw	r24, r26
 b9a:	08 95       	ret

00000b9c <__divmodhi4>:
 b9c:	97 fb       	bst	r25, 7
 b9e:	09 2e       	mov	r0, r25
 ba0:	07 26       	eor	r0, r23
 ba2:	0a d0       	rcall	.+20     	; 0xbb8 <__divmodhi4_neg1>
 ba4:	77 fd       	sbrc	r23, 7
 ba6:	04 d0       	rcall	.+8      	; 0xbb0 <__divmodhi4_neg2>
 ba8:	e5 df       	rcall	.-54     	; 0xb74 <__udivmodhi4>
 baa:	06 d0       	rcall	.+12     	; 0xbb8 <__divmodhi4_neg1>
 bac:	00 20       	and	r0, r0
 bae:	1a f4       	brpl	.+6      	; 0xbb6 <__divmodhi4_exit>

00000bb0 <__divmodhi4_neg2>:
 bb0:	70 95       	com	r23
 bb2:	61 95       	neg	r22
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb6 <__divmodhi4_exit>:
 bb6:	08 95       	ret

00000bb8 <__divmodhi4_neg1>:
 bb8:	f6 f7       	brtc	.-4      	; 0xbb6 <__divmodhi4_exit>
 bba:	90 95       	com	r25
 bbc:	81 95       	neg	r24
 bbe:	9f 4f       	sbci	r25, 0xFF	; 255
 bc0:	08 95       	ret

00000bc2 <__divmodsi4>:
 bc2:	97 fb       	bst	r25, 7
 bc4:	09 2e       	mov	r0, r25
 bc6:	05 26       	eor	r0, r21
 bc8:	0e d0       	rcall	.+28     	; 0xbe6 <__divmodsi4_neg1>
 bca:	57 fd       	sbrc	r21, 7
 bcc:	04 d0       	rcall	.+8      	; 0xbd6 <__divmodsi4_neg2>
 bce:	14 d0       	rcall	.+40     	; 0xbf8 <__udivmodsi4>
 bd0:	0a d0       	rcall	.+20     	; 0xbe6 <__divmodsi4_neg1>
 bd2:	00 1c       	adc	r0, r0
 bd4:	38 f4       	brcc	.+14     	; 0xbe4 <__divmodsi4_exit>

00000bd6 <__divmodsi4_neg2>:
 bd6:	50 95       	com	r21
 bd8:	40 95       	com	r20
 bda:	30 95       	com	r19
 bdc:	21 95       	neg	r18
 bde:	3f 4f       	sbci	r19, 0xFF	; 255
 be0:	4f 4f       	sbci	r20, 0xFF	; 255
 be2:	5f 4f       	sbci	r21, 0xFF	; 255

00000be4 <__divmodsi4_exit>:
 be4:	08 95       	ret

00000be6 <__divmodsi4_neg1>:
 be6:	f6 f7       	brtc	.-4      	; 0xbe4 <__divmodsi4_exit>
 be8:	90 95       	com	r25
 bea:	80 95       	com	r24
 bec:	70 95       	com	r23
 bee:	61 95       	neg	r22
 bf0:	7f 4f       	sbci	r23, 0xFF	; 255
 bf2:	8f 4f       	sbci	r24, 0xFF	; 255
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	08 95       	ret

00000bf8 <__udivmodsi4>:
 bf8:	a1 e2       	ldi	r26, 0x21	; 33
 bfa:	1a 2e       	mov	r1, r26
 bfc:	aa 1b       	sub	r26, r26
 bfe:	bb 1b       	sub	r27, r27
 c00:	fd 01       	movw	r30, r26
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <__udivmodsi4_ep>

00000c04 <__udivmodsi4_loop>:
 c04:	aa 1f       	adc	r26, r26
 c06:	bb 1f       	adc	r27, r27
 c08:	ee 1f       	adc	r30, r30
 c0a:	ff 1f       	adc	r31, r31
 c0c:	a2 17       	cp	r26, r18
 c0e:	b3 07       	cpc	r27, r19
 c10:	e4 07       	cpc	r30, r20
 c12:	f5 07       	cpc	r31, r21
 c14:	20 f0       	brcs	.+8      	; 0xc1e <__udivmodsi4_ep>
 c16:	a2 1b       	sub	r26, r18
 c18:	b3 0b       	sbc	r27, r19
 c1a:	e4 0b       	sbc	r30, r20
 c1c:	f5 0b       	sbc	r31, r21

00000c1e <__udivmodsi4_ep>:
 c1e:	66 1f       	adc	r22, r22
 c20:	77 1f       	adc	r23, r23
 c22:	88 1f       	adc	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	1a 94       	dec	r1
 c28:	69 f7       	brne	.-38     	; 0xc04 <__udivmodsi4_loop>
 c2a:	60 95       	com	r22
 c2c:	70 95       	com	r23
 c2e:	80 95       	com	r24
 c30:	90 95       	com	r25
 c32:	9b 01       	movw	r18, r22
 c34:	ac 01       	movw	r20, r24
 c36:	bd 01       	movw	r22, r26
 c38:	cf 01       	movw	r24, r30
 c3a:	08 95       	ret

00000c3c <malloc>:
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	ac 01       	movw	r20, r24
 c42:	82 30       	cpi	r24, 0x02	; 2
 c44:	91 05       	cpc	r25, r1
 c46:	10 f4       	brcc	.+4      	; 0xc4c <malloc+0x10>
 c48:	42 e0       	ldi	r20, 0x02	; 2
 c4a:	50 e0       	ldi	r21, 0x00	; 0
 c4c:	e0 91 98 00 	lds	r30, 0x0098
 c50:	f0 91 99 00 	lds	r31, 0x0099
 c54:	20 e0       	ldi	r18, 0x00	; 0
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	a0 e0       	ldi	r26, 0x00	; 0
 c5a:	b0 e0       	ldi	r27, 0x00	; 0
 c5c:	24 c0       	rjmp	.+72     	; 0xca6 <malloc+0x6a>
 c5e:	80 81       	ld	r24, Z
 c60:	91 81       	ldd	r25, Z+1	; 0x01
 c62:	84 17       	cp	r24, r20
 c64:	95 07       	cpc	r25, r21
 c66:	d0 f0       	brcs	.+52     	; 0xc9c <malloc+0x60>
 c68:	84 17       	cp	r24, r20
 c6a:	95 07       	cpc	r25, r21
 c6c:	71 f4       	brne	.+28     	; 0xc8a <malloc+0x4e>
 c6e:	82 81       	ldd	r24, Z+2	; 0x02
 c70:	93 81       	ldd	r25, Z+3	; 0x03
 c72:	10 97       	sbiw	r26, 0x00	; 0
 c74:	29 f0       	breq	.+10     	; 0xc80 <malloc+0x44>
 c76:	13 96       	adiw	r26, 0x03	; 3
 c78:	9c 93       	st	X, r25
 c7a:	8e 93       	st	-X, r24
 c7c:	12 97       	sbiw	r26, 0x02	; 2
 c7e:	2c c0       	rjmp	.+88     	; 0xcd8 <malloc+0x9c>
 c80:	90 93 99 00 	sts	0x0099, r25
 c84:	80 93 98 00 	sts	0x0098, r24
 c88:	27 c0       	rjmp	.+78     	; 0xcd8 <malloc+0x9c>
 c8a:	21 15       	cp	r18, r1
 c8c:	31 05       	cpc	r19, r1
 c8e:	19 f0       	breq	.+6      	; 0xc96 <malloc+0x5a>
 c90:	82 17       	cp	r24, r18
 c92:	93 07       	cpc	r25, r19
 c94:	18 f4       	brcc	.+6      	; 0xc9c <malloc+0x60>
 c96:	9c 01       	movw	r18, r24
 c98:	bd 01       	movw	r22, r26
 c9a:	ef 01       	movw	r28, r30
 c9c:	92 81       	ldd	r25, Z+2	; 0x02
 c9e:	83 81       	ldd	r24, Z+3	; 0x03
 ca0:	df 01       	movw	r26, r30
 ca2:	e9 2f       	mov	r30, r25
 ca4:	f8 2f       	mov	r31, r24
 ca6:	30 97       	sbiw	r30, 0x00	; 0
 ca8:	d1 f6       	brne	.-76     	; 0xc5e <malloc+0x22>
 caa:	21 15       	cp	r18, r1
 cac:	31 05       	cpc	r19, r1
 cae:	f9 f0       	breq	.+62     	; 0xcee <malloc+0xb2>
 cb0:	c9 01       	movw	r24, r18
 cb2:	84 1b       	sub	r24, r20
 cb4:	95 0b       	sbc	r25, r21
 cb6:	84 30       	cpi	r24, 0x04	; 4
 cb8:	91 05       	cpc	r25, r1
 cba:	80 f4       	brcc	.+32     	; 0xcdc <malloc+0xa0>
 cbc:	8a 81       	ldd	r24, Y+2	; 0x02
 cbe:	9b 81       	ldd	r25, Y+3	; 0x03
 cc0:	61 15       	cp	r22, r1
 cc2:	71 05       	cpc	r23, r1
 cc4:	21 f0       	breq	.+8      	; 0xcce <malloc+0x92>
 cc6:	fb 01       	movw	r30, r22
 cc8:	93 83       	std	Z+3, r25	; 0x03
 cca:	82 83       	std	Z+2, r24	; 0x02
 ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <malloc+0x9a>
 cce:	90 93 99 00 	sts	0x0099, r25
 cd2:	80 93 98 00 	sts	0x0098, r24
 cd6:	fe 01       	movw	r30, r28
 cd8:	32 96       	adiw	r30, 0x02	; 2
 cda:	42 c0       	rjmp	.+132    	; 0xd60 <malloc+0x124>
 cdc:	fe 01       	movw	r30, r28
 cde:	e8 0f       	add	r30, r24
 ce0:	f9 1f       	adc	r31, r25
 ce2:	41 93       	st	Z+, r20
 ce4:	51 93       	st	Z+, r21
 ce6:	02 97       	sbiw	r24, 0x02	; 2
 ce8:	99 83       	std	Y+1, r25	; 0x01
 cea:	88 83       	st	Y, r24
 cec:	39 c0       	rjmp	.+114    	; 0xd60 <malloc+0x124>
 cee:	80 91 96 00 	lds	r24, 0x0096
 cf2:	90 91 97 00 	lds	r25, 0x0097
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	41 f4       	brne	.+16     	; 0xd0a <malloc+0xce>
 cfa:	80 91 7f 00 	lds	r24, 0x007F
 cfe:	90 91 80 00 	lds	r25, 0x0080
 d02:	90 93 97 00 	sts	0x0097, r25
 d06:	80 93 96 00 	sts	0x0096, r24
 d0a:	20 91 7d 00 	lds	r18, 0x007D
 d0e:	30 91 7e 00 	lds	r19, 0x007E
 d12:	21 15       	cp	r18, r1
 d14:	31 05       	cpc	r19, r1
 d16:	41 f4       	brne	.+16     	; 0xd28 <malloc+0xec>
 d18:	2d b7       	in	r18, 0x3d	; 61
 d1a:	3e b7       	in	r19, 0x3e	; 62
 d1c:	80 91 81 00 	lds	r24, 0x0081
 d20:	90 91 82 00 	lds	r25, 0x0082
 d24:	28 1b       	sub	r18, r24
 d26:	39 0b       	sbc	r19, r25
 d28:	e0 91 96 00 	lds	r30, 0x0096
 d2c:	f0 91 97 00 	lds	r31, 0x0097
 d30:	e2 17       	cp	r30, r18
 d32:	f3 07       	cpc	r31, r19
 d34:	98 f4       	brcc	.+38     	; 0xd5c <malloc+0x120>
 d36:	2e 1b       	sub	r18, r30
 d38:	3f 0b       	sbc	r19, r31
 d3a:	24 17       	cp	r18, r20
 d3c:	35 07       	cpc	r19, r21
 d3e:	70 f0       	brcs	.+28     	; 0xd5c <malloc+0x120>
 d40:	ca 01       	movw	r24, r20
 d42:	02 96       	adiw	r24, 0x02	; 2
 d44:	28 17       	cp	r18, r24
 d46:	39 07       	cpc	r19, r25
 d48:	48 f0       	brcs	.+18     	; 0xd5c <malloc+0x120>
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	90 93 97 00 	sts	0x0097, r25
 d52:	80 93 96 00 	sts	0x0096, r24
 d56:	41 93       	st	Z+, r20
 d58:	51 93       	st	Z+, r21
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <malloc+0x124>
 d5c:	e0 e0       	ldi	r30, 0x00	; 0
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	cf 01       	movw	r24, r30
 d62:	df 91       	pop	r29
 d64:	cf 91       	pop	r28
 d66:	08 95       	ret

00000d68 <free>:
 d68:	0f 93       	push	r16
 d6a:	1f 93       	push	r17
 d6c:	cf 93       	push	r28
 d6e:	df 93       	push	r29
 d70:	9c 01       	movw	r18, r24
 d72:	00 97       	sbiw	r24, 0x00	; 0
 d74:	09 f4       	brne	.+2      	; 0xd78 <free+0x10>
 d76:	8c c0       	rjmp	.+280    	; 0xe90 <free+0x128>
 d78:	dc 01       	movw	r26, r24
 d7a:	12 97       	sbiw	r26, 0x02	; 2
 d7c:	13 96       	adiw	r26, 0x03	; 3
 d7e:	1c 92       	st	X, r1
 d80:	1e 92       	st	-X, r1
 d82:	12 97       	sbiw	r26, 0x02	; 2
 d84:	60 91 98 00 	lds	r22, 0x0098
 d88:	70 91 99 00 	lds	r23, 0x0099
 d8c:	61 15       	cp	r22, r1
 d8e:	71 05       	cpc	r23, r1
 d90:	89 f4       	brne	.+34     	; 0xdb4 <free+0x4c>
 d92:	8d 91       	ld	r24, X+
 d94:	9c 91       	ld	r25, X
 d96:	11 97       	sbiw	r26, 0x01	; 1
 d98:	82 0f       	add	r24, r18
 d9a:	93 1f       	adc	r25, r19
 d9c:	20 91 96 00 	lds	r18, 0x0096
 da0:	30 91 97 00 	lds	r19, 0x0097
 da4:	28 17       	cp	r18, r24
 da6:	39 07       	cpc	r19, r25
 da8:	69 f5       	brne	.+90     	; 0xe04 <free+0x9c>
 daa:	b0 93 97 00 	sts	0x0097, r27
 dae:	a0 93 96 00 	sts	0x0096, r26
 db2:	6e c0       	rjmp	.+220    	; 0xe90 <free+0x128>
 db4:	fb 01       	movw	r30, r22
 db6:	40 e0       	ldi	r20, 0x00	; 0
 db8:	50 e0       	ldi	r21, 0x00	; 0
 dba:	01 c0       	rjmp	.+2      	; 0xdbe <free+0x56>
 dbc:	fc 01       	movw	r30, r24
 dbe:	ea 17       	cp	r30, r26
 dc0:	fb 07       	cpc	r31, r27
 dc2:	30 f4       	brcc	.+12     	; 0xdd0 <free+0x68>
 dc4:	82 81       	ldd	r24, Z+2	; 0x02
 dc6:	93 81       	ldd	r25, Z+3	; 0x03
 dc8:	af 01       	movw	r20, r30
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	b9 f7       	brne	.-18     	; 0xdbc <free+0x54>
 dce:	1f c0       	rjmp	.+62     	; 0xe0e <free+0xa6>
 dd0:	e9 01       	movw	r28, r18
 dd2:	22 97       	sbiw	r28, 0x02	; 2
 dd4:	fb 83       	std	Y+3, r31	; 0x03
 dd6:	ea 83       	std	Y+2, r30	; 0x02
 dd8:	08 81       	ld	r16, Y
 dda:	19 81       	ldd	r17, Y+1	; 0x01
 ddc:	c9 01       	movw	r24, r18
 dde:	80 0f       	add	r24, r16
 de0:	91 1f       	adc	r25, r17
 de2:	8e 17       	cp	r24, r30
 de4:	9f 07       	cpc	r25, r31
 de6:	59 f4       	brne	.+22     	; 0xdfe <free+0x96>
 de8:	80 81       	ld	r24, Z
 dea:	91 81       	ldd	r25, Z+1	; 0x01
 dec:	80 0f       	add	r24, r16
 dee:	91 1f       	adc	r25, r17
 df0:	02 96       	adiw	r24, 0x02	; 2
 df2:	99 83       	std	Y+1, r25	; 0x01
 df4:	88 83       	st	Y, r24
 df6:	82 81       	ldd	r24, Z+2	; 0x02
 df8:	93 81       	ldd	r25, Z+3	; 0x03
 dfa:	9b 83       	std	Y+3, r25	; 0x03
 dfc:	8a 83       	std	Y+2, r24	; 0x02
 dfe:	41 15       	cp	r20, r1
 e00:	51 05       	cpc	r21, r1
 e02:	29 f4       	brne	.+10     	; 0xe0e <free+0xa6>
 e04:	b0 93 99 00 	sts	0x0099, r27
 e08:	a0 93 98 00 	sts	0x0098, r26
 e0c:	41 c0       	rjmp	.+130    	; 0xe90 <free+0x128>
 e0e:	fa 01       	movw	r30, r20
 e10:	b3 83       	std	Z+3, r27	; 0x03
 e12:	a2 83       	std	Z+2, r26	; 0x02
 e14:	c1 91       	ld	r28, Z+
 e16:	d1 91       	ld	r29, Z+
 e18:	ec 0f       	add	r30, r28
 e1a:	fd 1f       	adc	r31, r29
 e1c:	ae 17       	cp	r26, r30
 e1e:	bf 07       	cpc	r27, r31
 e20:	81 f4       	brne	.+32     	; 0xe42 <free+0xda>
 e22:	f9 01       	movw	r30, r18
 e24:	92 91       	ld	r25, -Z
 e26:	82 91       	ld	r24, -Z
 e28:	8c 0f       	add	r24, r28
 e2a:	9d 1f       	adc	r25, r29
 e2c:	02 96       	adiw	r24, 0x02	; 2
 e2e:	da 01       	movw	r26, r20
 e30:	11 96       	adiw	r26, 0x01	; 1
 e32:	9c 93       	st	X, r25
 e34:	8e 93       	st	-X, r24
 e36:	82 81       	ldd	r24, Z+2	; 0x02
 e38:	93 81       	ldd	r25, Z+3	; 0x03
 e3a:	13 96       	adiw	r26, 0x03	; 3
 e3c:	9c 93       	st	X, r25
 e3e:	8e 93       	st	-X, r24
 e40:	12 97       	sbiw	r26, 0x02	; 2
 e42:	e0 e0       	ldi	r30, 0x00	; 0
 e44:	f0 e0       	ldi	r31, 0x00	; 0
 e46:	02 c0       	rjmp	.+4      	; 0xe4c <free+0xe4>
 e48:	fb 01       	movw	r30, r22
 e4a:	bc 01       	movw	r22, r24
 e4c:	db 01       	movw	r26, r22
 e4e:	12 96       	adiw	r26, 0x02	; 2
 e50:	8d 91       	ld	r24, X+
 e52:	9c 91       	ld	r25, X
 e54:	13 97       	sbiw	r26, 0x03	; 3
 e56:	00 97       	sbiw	r24, 0x00	; 0
 e58:	b9 f7       	brne	.-18     	; 0xe48 <free+0xe0>
 e5a:	cb 01       	movw	r24, r22
 e5c:	02 96       	adiw	r24, 0x02	; 2
 e5e:	2d 91       	ld	r18, X+
 e60:	3c 91       	ld	r19, X
 e62:	11 97       	sbiw	r26, 0x01	; 1
 e64:	82 0f       	add	r24, r18
 e66:	93 1f       	adc	r25, r19
 e68:	20 91 96 00 	lds	r18, 0x0096
 e6c:	30 91 97 00 	lds	r19, 0x0097
 e70:	28 17       	cp	r18, r24
 e72:	39 07       	cpc	r19, r25
 e74:	69 f4       	brne	.+26     	; 0xe90 <free+0x128>
 e76:	30 97       	sbiw	r30, 0x00	; 0
 e78:	29 f4       	brne	.+10     	; 0xe84 <free+0x11c>
 e7a:	10 92 99 00 	sts	0x0099, r1
 e7e:	10 92 98 00 	sts	0x0098, r1
 e82:	02 c0       	rjmp	.+4      	; 0xe88 <free+0x120>
 e84:	13 82       	std	Z+3, r1	; 0x03
 e86:	12 82       	std	Z+2, r1	; 0x02
 e88:	70 93 97 00 	sts	0x0097, r23
 e8c:	60 93 96 00 	sts	0x0096, r22
 e90:	df 91       	pop	r29
 e92:	cf 91       	pop	r28
 e94:	1f 91       	pop	r17
 e96:	0f 91       	pop	r16
 e98:	08 95       	ret

00000e9a <do_rand>:
 e9a:	8f 92       	push	r8
 e9c:	9f 92       	push	r9
 e9e:	af 92       	push	r10
 ea0:	bf 92       	push	r11
 ea2:	cf 92       	push	r12
 ea4:	df 92       	push	r13
 ea6:	ef 92       	push	r14
 ea8:	ff 92       	push	r15
 eaa:	cf 93       	push	r28
 eac:	df 93       	push	r29
 eae:	ec 01       	movw	r28, r24
 eb0:	88 81       	ld	r24, Y
 eb2:	99 81       	ldd	r25, Y+1	; 0x01
 eb4:	aa 81       	ldd	r26, Y+2	; 0x02
 eb6:	bb 81       	ldd	r27, Y+3	; 0x03
 eb8:	00 97       	sbiw	r24, 0x00	; 0
 eba:	a1 05       	cpc	r26, r1
 ebc:	b1 05       	cpc	r27, r1
 ebe:	21 f4       	brne	.+8      	; 0xec8 <do_rand+0x2e>
 ec0:	84 e2       	ldi	r24, 0x24	; 36
 ec2:	99 ed       	ldi	r25, 0xD9	; 217
 ec4:	ab e5       	ldi	r26, 0x5B	; 91
 ec6:	b7 e0       	ldi	r27, 0x07	; 7
 ec8:	bc 01       	movw	r22, r24
 eca:	cd 01       	movw	r24, r26
 ecc:	2d e1       	ldi	r18, 0x1D	; 29
 ece:	33 ef       	ldi	r19, 0xF3	; 243
 ed0:	41 e0       	ldi	r20, 0x01	; 1
 ed2:	50 e0       	ldi	r21, 0x00	; 0
 ed4:	76 de       	rcall	.-788    	; 0xbc2 <__divmodsi4>
 ed6:	49 01       	movw	r8, r18
 ed8:	5a 01       	movw	r10, r20
 eda:	27 ea       	ldi	r18, 0xA7	; 167
 edc:	31 e4       	ldi	r19, 0x41	; 65
 ede:	40 e0       	ldi	r20, 0x00	; 0
 ee0:	50 e0       	ldi	r21, 0x00	; 0
 ee2:	50 d0       	rcall	.+160    	; 0xf84 <__mulsi3>
 ee4:	6b 01       	movw	r12, r22
 ee6:	7c 01       	movw	r14, r24
 ee8:	c5 01       	movw	r24, r10
 eea:	b4 01       	movw	r22, r8
 eec:	2c ee       	ldi	r18, 0xEC	; 236
 eee:	34 ef       	ldi	r19, 0xF4	; 244
 ef0:	4f ef       	ldi	r20, 0xFF	; 255
 ef2:	5f ef       	ldi	r21, 0xFF	; 255
 ef4:	47 d0       	rcall	.+142    	; 0xf84 <__mulsi3>
 ef6:	dc 01       	movw	r26, r24
 ef8:	cb 01       	movw	r24, r22
 efa:	c8 0e       	add	r12, r24
 efc:	d9 1e       	adc	r13, r25
 efe:	ea 1e       	adc	r14, r26
 f00:	fb 1e       	adc	r15, r27
 f02:	f7 fe       	sbrs	r15, 7
 f04:	08 c0       	rjmp	.+16     	; 0xf16 <do_rand+0x7c>
 f06:	8f ef       	ldi	r24, 0xFF	; 255
 f08:	9f ef       	ldi	r25, 0xFF	; 255
 f0a:	af ef       	ldi	r26, 0xFF	; 255
 f0c:	bf e7       	ldi	r27, 0x7F	; 127
 f0e:	c8 0e       	add	r12, r24
 f10:	d9 1e       	adc	r13, r25
 f12:	ea 1e       	adc	r14, r26
 f14:	fb 1e       	adc	r15, r27
 f16:	c8 82       	st	Y, r12
 f18:	d9 82       	std	Y+1, r13	; 0x01
 f1a:	ea 82       	std	Y+2, r14	; 0x02
 f1c:	fb 82       	std	Y+3, r15	; 0x03
 f1e:	c6 01       	movw	r24, r12
 f20:	9f 77       	andi	r25, 0x7F	; 127
 f22:	df 91       	pop	r29
 f24:	cf 91       	pop	r28
 f26:	ff 90       	pop	r15
 f28:	ef 90       	pop	r14
 f2a:	df 90       	pop	r13
 f2c:	cf 90       	pop	r12
 f2e:	bf 90       	pop	r11
 f30:	af 90       	pop	r10
 f32:	9f 90       	pop	r9
 f34:	8f 90       	pop	r8
 f36:	08 95       	ret

00000f38 <rand_r>:
 f38:	b0 df       	rcall	.-160    	; 0xe9a <do_rand>
 f3a:	08 95       	ret

00000f3c <rand>:
 f3c:	83 e8       	ldi	r24, 0x83	; 131
 f3e:	90 e0       	ldi	r25, 0x00	; 0
 f40:	ac df       	rcall	.-168    	; 0xe9a <do_rand>
 f42:	08 95       	ret

00000f44 <srand>:
 f44:	a0 e0       	ldi	r26, 0x00	; 0
 f46:	b0 e0       	ldi	r27, 0x00	; 0
 f48:	80 93 83 00 	sts	0x0083, r24
 f4c:	90 93 84 00 	sts	0x0084, r25
 f50:	a0 93 85 00 	sts	0x0085, r26
 f54:	b0 93 86 00 	sts	0x0086, r27
 f58:	08 95       	ret

00000f5a <__eerd_byte_m8>:
 f5a:	e1 99       	sbic	0x1c, 1	; 28
 f5c:	fe cf       	rjmp	.-4      	; 0xf5a <__eerd_byte_m8>
 f5e:	9f bb       	out	0x1f, r25	; 31
 f60:	8e bb       	out	0x1e, r24	; 30
 f62:	e0 9a       	sbi	0x1c, 0	; 28
 f64:	99 27       	eor	r25, r25
 f66:	8d b3       	in	r24, 0x1d	; 29
 f68:	08 95       	ret

00000f6a <__eewr_byte_m8>:
 f6a:	26 2f       	mov	r18, r22

00000f6c <__eewr_r18_m8>:
 f6c:	e1 99       	sbic	0x1c, 1	; 28
 f6e:	fe cf       	rjmp	.-4      	; 0xf6c <__eewr_r18_m8>
 f70:	9f bb       	out	0x1f, r25	; 31
 f72:	8e bb       	out	0x1e, r24	; 30
 f74:	2d bb       	out	0x1d, r18	; 29
 f76:	0f b6       	in	r0, 0x3f	; 63
 f78:	f8 94       	cli
 f7a:	e2 9a       	sbi	0x1c, 2	; 28
 f7c:	e1 9a       	sbi	0x1c, 1	; 28
 f7e:	0f be       	out	0x3f, r0	; 63
 f80:	01 96       	adiw	r24, 0x01	; 1
 f82:	08 95       	ret

00000f84 <__mulsi3>:
 f84:	62 9f       	mul	r22, r18
 f86:	d0 01       	movw	r26, r0
 f88:	73 9f       	mul	r23, r19
 f8a:	f0 01       	movw	r30, r0
 f8c:	82 9f       	mul	r24, r18
 f8e:	e0 0d       	add	r30, r0
 f90:	f1 1d       	adc	r31, r1
 f92:	64 9f       	mul	r22, r20
 f94:	e0 0d       	add	r30, r0
 f96:	f1 1d       	adc	r31, r1
 f98:	92 9f       	mul	r25, r18
 f9a:	f0 0d       	add	r31, r0
 f9c:	83 9f       	mul	r24, r19
 f9e:	f0 0d       	add	r31, r0
 fa0:	74 9f       	mul	r23, r20
 fa2:	f0 0d       	add	r31, r0
 fa4:	65 9f       	mul	r22, r21
 fa6:	f0 0d       	add	r31, r0
 fa8:	99 27       	eor	r25, r25
 faa:	72 9f       	mul	r23, r18
 fac:	b0 0d       	add	r27, r0
 fae:	e1 1d       	adc	r30, r1
 fb0:	f9 1f       	adc	r31, r25
 fb2:	63 9f       	mul	r22, r19
 fb4:	b0 0d       	add	r27, r0
 fb6:	e1 1d       	adc	r30, r1
 fb8:	f9 1f       	adc	r31, r25
 fba:	bd 01       	movw	r22, r26
 fbc:	cf 01       	movw	r24, r30
 fbe:	11 24       	eor	r1, r1
 fc0:	08 95       	ret

00000fc2 <_exit>:
 fc2:	f8 94       	cli

00000fc4 <__stop_program>:
 fc4:	ff cf       	rjmp	.-2      	; 0xfc4 <__stop_program>
